// Generated by CoffeeScript 1.7.1
(function() {
  this.askForLink = function(tl, br, modify) {
    var modalJ, submit;
    if (modify == null) {
      modify = null;
    }
    if (!checkPosition(tl, br)) {
      return;
    }
    modalJ = $('#urlModal');
    if (modify != null) {
      modalJ.find('.modal-title').text("Modify your link");
      modalJ.find('input.name').val(modify.name);
      modalJ.find('input.url').val(modify.url);
      modalJ.find('input.message').val(modify.message);
      modalJ.find('.btn-primary').text("Modify");
    } else {
      modalJ.find("modal-title").text("Add a link to your website");
      modalJ.find('input.name').val("");
      modalJ.find('input.url').val("");
      modalJ.find('input.message').val("");
      modalJ.find('.btn-primary').text("Add");
    }
    modalJ.modal('show');
    modalJ.on('shown.bs.modal', function(event) {
      return modalJ.find('input.name').focus();
    });
    submit = function() {
      var message, name, url;
      url = modalJ.find("input.url").val();
      if (url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) {
        url = "http://" + url;
      }
      name = modalJ.find("input.name").val();
      message = modalJ.find("input.message").val();
      g.tools['link'].select();
      saveBox(tl, br, message, name, url, modify != null, modify != null ? modify.pk : void 0);
      return modalJ.modal('hide');
    };
    modalJ.find('.submit-shortcut').keypress(function(event) {
      if (event.which === 13) {
        event.preventDefault();
        return submit();
      }
    });
    return modalJ.find('.btn-primary').click(function(event) {
      return submit();
    });
  };

  this.askForLock = function(tl, br, modify) {
    var modalJ, submit;
    if (modify == null) {
      modify = null;
    }
    if (!checkPosition(tl, br)) {
      return;
    }
    modalJ = $('#lockModal');
    if (modify != null) {
      modalJ.find('.modal-title').text("Modify your area");
      modalJ.find('input.message').val(modify.message);
      modalJ.find('.btn-primary').text("Modify");
    } else {
      modalJ.find("modal-title").text("Add a link to your website");
      modalJ.find('input.message').val("");
      modalJ.find('.btn-primary').text("Lock");
    }
    modalJ.modal('show');
    modalJ.on('shown.bs.modal', function(event) {
      return modalJ.find('input.message').focus();
    });
    submit = function() {
      var message;
      message = modalJ.find("input.message").val();
      g.tools['lock'].select();
      saveBox(tl, br, message, "", "", modify != null, modify != null ? modify.pk : void 0);
      return modalJ.modal('hide');
    };
    modalJ.find('.submit-shortcut').keypress(function(event) {
      if (event.which === 13) {
        event.preventDefault();
        return submit();
      }
    });
    return modalJ.find('.btn-primary').click(function(event) {
      return submit();
    });
  };

  this.addLink = function(tl, br, url, name, message, owner, pk, modified) {
    var cx, cy, linkJ, lock, lockOffset, modifyBtn, _i, _j, _len, _len1, _ref, _ref1;
    if (pk == null) {
      pk = null;
    }
    if (modified == null) {
      modified = false;
    }
    linkJ = null;
    if (modified) {
      _ref = g.locks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lock = _ref[_i];
        if (lock.attr("data-pk") === pk) {
          linkJ = lock;
        }
      }
      if (linkJ === null) {
        return;
      }
    } else {
      _ref1 = g.locks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        lock = _ref1[_j];
        lockOffset = lock.offset();
        cx = tl.x + g.canvasJ.offset().left;
        cy = tl.y + g.canvasJ.offset().top;
        if (lockOffset.left === cx && lockOffset.y === cy) {
          return;
        }
      }
      linkJ = g.templatesJ.find(".link").clone().prependTo(g.stageJ);
      linkJ = g.stageJ.find(".link:first");
    }
    linkJ.attr('data-title', name + ' by ' + owner);
    linkJ.attr('data-owner', owner);
    linkJ.attr('data-name', name);
    linkJ.attr('href', url);
    linkJ.attr('data-content', message);
    linkJ.popover({
      placement: 'auto top',
      trigger: 'hover'
    });
    if (modified) {
      return;
    }
    linkJ.offset({
      left: tl.x + g.canvasJ.offset().left,
      top: tl.y + g.canvasJ.offset().top
    });
    linkJ.width(br.x - tl.x);
    linkJ.height(br.y - tl.y);
    linkJ.attr("data-pk", pk);
    if (owner === g.me) {
      modifyBtn = g.templatesJ.find("button.modifyBtn").clone().prependTo(linkJ);
      modifyBtn.click(function(event) {
        var modify;
        event.preventDefault();
        linkJ = $(this).parent(".link");
        pk = linkJ.attr("data-pk");
        owner = linkJ.attr("data-owner");
        message = linkJ.attr("data-content");
        name = linkJ.attr("data-name");
        url = linkJ.attr("href");
        modify = {
          pk: pk,
          name: name,
          owner: owner,
          message: message,
          url: url
        };
        return askForLink(new Point(tl.x, tl.y), new Point(br.x, br.y), modify);
      });
    }
    return g.locks.push(linkJ);
  };

  this.addLock = function(tl, br, message, owner, pk, modified) {
    var lock, lockJ, modifyBtn, popover, _i, _len, _ref;
    if (pk == null) {
      pk = null;
    }
    if (modified == null) {
      modified = false;
    }
    lockJ = null;
    if (modified) {
      _ref = g.locks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lock = _ref[_i];
        if (lock.attr("data-pk") === pk) {
          lockJ = lock;
        }
      }
      if (lockJ === null) {
        return;
      }
    } else {
      lockJ = g.templatesJ.find(".lock").clone().prependTo(g.stageJ);
      lockJ = g.stageJ.find(".lock:first");
    }
    lockJ.attr('data-title', 'This area was locked by ' + owner);
    lockJ.attr('data-content', message);
    popover = lockJ.popover({
      placement: 'auto top',
      trigger: 'hover'
    });
    if (modified) {
      return;
    }
    lockJ.offset({
      left: tl.x + g.canvasJ.offset().left,
      top: tl.y + g.canvasJ.offset().top
    });
    lockJ.width(br.x - tl.x);
    lockJ.height(br.y - tl.y);
    lockJ.attr("data-pk", pk);
    if (owner === g.me) {
      modifyBtn = g.templatesJ.find("button.modifyBtn").clone().prependTo(lockJ);
      modifyBtn.click(function(event) {
        var modify;
        event.preventDefault();
        lockJ = $(this).parent(".lock");
        pk = lockJ.attr("data-pk");
        owner = lockJ.attr("data-owner");
        message = lockJ.attr("data-content");
        modify = {
          pk: pk,
          owner: owner,
          message: message
        };
        return askForLock(new Point(tl.x, tl.y), new Point(br.x, br.y), modify);
      });
    }
    return g.locks.push(lockJ);
  };

}).call(this);

//# sourceMappingURL=item.map
