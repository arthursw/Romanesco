// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils', 'coffee', 'ace', 'aceTools', 'jquery', 'typeahead'], function(utils, CoffeeScript) {
    var ce, g;
    if (typeof ace === "undefined" || ace === null) {
      require(['ace'], function() {
        console.log("ace: " + ace);
      });
    }
    g = utils.g();
    g.codeEditor = {};
    ce = g.codeEditor;
    ce.module = null;
    ce.MAX_COMMANDS = 50;
    ce.commandQueue = [];
    ce.commandIndex = -1;
    ce.initializeModuleInput = function() {
      var input;
      input = ce.moduleInputJ;
      ce.moduleNameValue = null;
      input.typeahead({
        hint: true,
        highlight: true,
        minLength: 1
      }, {
        valueKey: 'value',
        displayKey: 'value',
        source: g.typeaheadModuleEngine.ttAdapter()
      });
      input.on('typeahead:opened', function() {});
      ce.setSourceFromServer = function(result) {
        var module;
        if (!g.checkError(result)) {
          return;
        }
        module = JSON.parse(result.module);
        if (module.lock != null) {
          module.lock = g.items[module.lock.$oid];
        }
        if (module.lock == null) {
          g.romanesco_alert("The module is linked with a lock, but the lock is not loaded.", "warning");
        }
        ce.setSource(module);
      };
      ce.setSource = function(module) {
        ce.editor.getSession().setValue(module.source);
        ce.module = module;
        g.codeEditor.pushRequestBtnJ.text('Push request (update "' + module.name + '" module)');
      };
      ce.initializeNewModuleFromName = function(moduleName, lock) {
        var source;
        if (moduleName == null) {
          moduleName = 'NewPath';
        }
        if (lock == null) {
          lock = null;
        }
        if (lock == null) {
          source = "class " + moduleName + " extends g.PrecisePath\n";
          source += "\t@rname = '" + moduleName + "'\n";
          source += "\t@rdescription = '" + moduleName + "'\n";
          source += "\t\n	drawBegin: ()->\n\n		@initializeDrawing(false)\n\n		@path = @addPath()\n		return\n\n	drawUpdateStep: (length)->\n\n		point = @controlPath.getPointAt(length)\n		@path.add(point)\n		return\n\n	drawEnd: ()->\n		return\n\n";
          source += "tool = new g.PathTool(" + moduleName + ", true)";
        } else {
          source = "";
        }
        ce.editor.getSession().setValue(source);
        ce.module = null;
        if (lock != null) {
          ce.module = {
            type: 'lock',
            lock: lock,
            newModule: true
          };
        }
        g.codeEditor.pushRequestBtnJ.text('Push request (create new module)');
      };
      input.keyup(function(event) {
        if (event.which === 13) {
          input.typeahead('close');
        }
      });
      input.on('typeahead:closed', function() {
        var moduleName;
        moduleName = input.val();
        if (moduleName === '') {
          return;
        }
        if (ce.moduleNameValue === moduleName) {
          if (g.modules[moduleName] != null) {
            ce.setSource(g.modules[moduleName]);
          } else {
            Dajaxice.draw.getModuleSource(ce.setSourceFromServer, {
              name: moduleName
            });
          }
        } else {
          ce.initializeNewModuleFromName(moduleName);
        }
      });
      input.on('typeahead:cursorchanged', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
      input.on('typeahead:selected', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
      input.on('typeahead:autocompleted', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
    };
    ce.loadModule = function(event) {
      var jqxhr, moduleName, owner;
      moduleName = $(this).attr("data-name");
      if (g.modules[moduleName] != null) {
        if (g.modules[moduleName].source != null) {
          g.codeEditor.setSource(g.modules[moduleName], false);
        } else {
          Dajaxice.draw.getModuleSource(ce.setSourceFromServer, {
            name: moduleName
          });
        }
      } else {
        owner = $(this).attr("data-owner");
        jqxhr = $.get("https://api.github.com/repos/" + owner + "/" + moduleName + "/contents/main.coffee", function(data) {
          var source;
          if (data.content != null) {
            source = atob(data.content);
            g.codeEditor.setSource({
              name: moduleName,
              source: source,
              githubURL: data.html_url
            }, false);
          }
        });
      }
      g.RModal.hide();
    };
    ce.createModuleEditorModal = function(result) {
      var acceptedGithubURLs, jqxhr, module, modules, _i, _len;
      if (!g.checkError(result)) {
        return;
      }
      modules = JSON.parse(result.modules);
      acceptedGithubURLs = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        module = modules[_i];
        g.modules[module.name] = module;
        acceptedGithubURLs.push(module.githubURL);
      }
      g.createModuleModal("Romanesco modules", ce.loadModule);
      jqxhr = $.get("https://api.github.com/search/repositories?q=romanesco+module", function(data) {
        var item, _j, _len1, _ref, _ref1;
        console.log("success");
        console.log(data);
        _ref = data.items;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          if (_ref1 = item.html_url, __indexOf.call(acceptedGithubURLs, _ref1) >= 0) {
            continue;
          }
          module = {
            name: item.name,
            owner: item.owner.login,
            githubURL: item.html_url,
            accepted: false
          };
          g.addModuleToModal(item.name, module, g.RModal.modalJ.find('tbody'), ce.loadModule);
        }
      });
    };
    g.initCodeEditor = function() {
      var closeBtnJ, name, pathClass, runBtnJ, saveChanges, source, _i, _len, _ref, _ref1;
      ce.editorJ = $(document.body).find("#codeEditor");
      ce.sourceSelectorJ = ce.editorJ.find(".source-selector");
      ce.moduleInputJ = ce.editorJ.find(".header .search input");
      ce.consoleJ = ce.editorJ.find(".console");
      ce.consoleContentJ = ce.consoleJ.find(".content");
      ce.codeJ = ce.editorJ.find(".code");
      ce.pushRequestBtnJ = ce.editorJ.find("button.request");
      ce.handleJ = ce.editorJ.find(".editor-handle");
      ce.consoleHandleJ = ce.editorJ.find(".console-handle");
      ce.consoleCloseBtnJ = ce.consoleHandleJ.find(".close");
      ce.footerJ = ce.editorJ.find(".footer");
      ce.openModalBtnJ = ce.editorJ.find(".open-modal");
      ce.openModalBtnJ.click(function(event) {
        Dajaxice.draw.getModuleList(ce.createModuleEditorModal);
      });
      ce.editor = ace.edit(ce.codeJ[0]);
      ce.editor.$blockScrolling = Infinity;
      ce.editor.setOptions({
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: false
      });
      ce.editor.setTheme("ace/theme/monokai");
      ce.editor.getSession().setUseSoftTabs(false);
      ce.editor.getSession().setMode("ace/mode/coffee");
      ce.editor.getSession().setValue("class TestPath extends g.PrecisePath\n  @rname = 'Test path'\n  @rdescription = \"Test path.\"\n\n  drawBegin: ()->\n\n    @initializeDrawing(false)\n\n    @path = @addPath()\n    return\n\n  drawUpdateStep: (length)->\n\n    point = @controlPath.getPointAt(length)\n    @path.add(point)\n    return\n\n  drawEnd: ()->\n    return\n", 1);
      ce.editor.commands.addCommand({
        name: 'execute',
        bindKey: {
          win: 'Ctrl-Shift-Enter',
          mac: 'Command-Shift-Enter',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          g.runScript();
        }
      });
      ce.addCommand = function(command) {
        ce.commandQueue.push(command);
        if (ce.commandQueue.length > ce.MAX_COMMANDS) {
          ce.commandQueue.shift();
        }
        ce.commandIndex = ce.commandQueue.length;
      };
      ce.editor.commands.addCommand({
        name: 'execute-command',
        bindKey: {
          win: 'Ctrl-Enter',
          mac: 'Command-Enter',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var command;
          command = ce.editor.getValue();
          if (command.length === 0) {
            return;
          }
          ce.addCommand(command);
          g.runScript();
          ce.editor.setValue('');
        }
      });
      ce.editor.commands.addCommand({
        name: 'previous-command',
        bindKey: {
          win: 'Ctrl-Up',
          mac: 'Command-Up',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var command, cursorPosition;
          cursorPosition = ce.editor.getCursorPosition();
          if (cursorPosition.row === 0 && cursorPosition.column === 0) {
            if (ce.commandIndex === ce.commandQueue.length) {
              command = ce.editor.getValue();
              if (command.length > 0) {
                ce.addCommand(command);
                ce.commandIndex--;
              }
            }
            if (ce.commandIndex > 0) {
              ce.commandIndex--;
              ce.editor.setValue(ce.commandQueue[ce.commandIndex]);
            }
          } else {
            ce.editor.gotoLine(0, 0);
          }
        }
      });
      ce.editor.commands.addCommand({
        name: 'next-command',
        bindKey: {
          win: 'Ctrl-Down',
          mac: 'Command-Down',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var cursorPosition, lastColumn, lastRow;
          cursorPosition = ce.editor.getCursorPosition();
          lastRow = ce.editor.getSession().getLength() - 1;
          lastColumn = ce.editor.getSession().getLine(lastRow).length;
          if (cursorPosition.row === lastRow && cursorPosition.column === lastColumn) {
            if (ce.commandIndex < ce.commandQueue.length - 1) {
              ce.commandIndex++;
              ce.editor.setValue(ce.commandQueue[ce.commandIndex]);
            }
          } else {
            ce.editor.gotoLine(lastRow + 1, lastColumn + 1);
          }
        }
      });
      ce.handleJ.mousedown(function() {
        ce.draggingEditor = true;
        $("body").css({
          'user-select': 'none'
        });
      });
      ce.consoleHandleJ.mousedown(function() {
        ce.draggingConsole = true;
        $("body").css({
          'user-select': 'none'
        });
      });
      ce.consoleHeight = 200;
      ce.closeConsole = function(consoleHeight) {
        if (consoleHeight == null) {
          consoleHeight = null;
        }
        ce.consoleHeight = consoleHeight || ce.consoleJ.height();
        ce.consoleJ.css({
          height: 0
        }).addClass('closed');
        ce.consoleCloseBtnJ.find('.glyphicon').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
        ce.editor.resize();
      };
      ce.openConsole = function(consoleHeight) {
        if (consoleHeight == null) {
          consoleHeight = null;
        }
        if (ce.consoleJ.hasClass('closed')) {
          ce.consoleJ.removeClass("highlight");
          ce.consoleJ.css({
            height: consoleHeight || ce.consoleHeight
          }).removeClass('closed');
          ce.consoleCloseBtnJ.find('.glyphicon').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
          ce.editor.resize();
        }
      };
      ce.consoleCloseBtnJ.click(function() {
        if (ce.consoleJ.hasClass('closed')) {
          ce.openConsole();
        } else {
          ce.closeConsole();
        }
      });
      ce.mousemove = function(event) {
        var bottom, footerHeight, height, minHeight;
        if (ce.draggingEditor) {
          ce.editorJ.css({
            right: window.innerWidth - event.pageX
          });
        }
        if (ce.draggingConsole) {
          footerHeight = ce.footerJ.outerHeight();
          bottom = ce.editorJ.outerHeight() - footerHeight;
          height = Math.min(bottom - event.pageY, window.innerHeight - footerHeight);
          ce.consoleJ.css({
            height: height
          });
          minHeight = 20;
          if (ce.consoleJ.hasClass('closed')) {
            if (height > minHeight) {
              ce.openConsole(height);
            }
          } else {
            if (height <= minHeight) {
              ce.closeConsole(200);
            }
          }
        }
      };
      ce.editorJ.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
        g.codeEditor.editor.resize();
      });
      ce.mouseup = function(event) {
        if (ce.draggingEditor || ce.draggingConsole) {
          g.codeEditor.editor.resize();
        }
        ce.draggingEditor = false;
        ce.draggingConsole = false;
        $("body").css({
          'user-select': 'text'
        });
      };
      _ref = g.pathClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pathClass = _ref[_i];
        ce.sourceSelectorJ.append($("<option>").append(pathClass.name));
      }
      if ((localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0) {
        _ref1 = JSON.parse(localStorage.romanescoCode);
        for (name in _ref1) {
          source = _ref1[name];
          ce.sourceSelectorJ.append($("<option>").append("saved - " + name));
        }
      }
      ce.sourceSelectorJ.change(function() {
        source = "";
        if (this.value.indexOf("saved - ") >= 0) {
          source = JSON.parse(localStorage.romanescoCode)[this.value.replace("saved - ", "")];
        }
        if (g[this.value] != null) {
          source = g[this.value].source;
        }
        if (source.length > 0) {
          ce.editor.getSession().setValue(source);
        }
      });
      saveChanges = function() {
        var className, firstLineRegExp, firstLineResult, romanescoCode;
        romanescoCode = {};
        if ((localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0) {
          romanescoCode = JSON.parse(localStorage.romanescoCode);
        }
        source = ce.editor.getValue();
        className = '';
        firstLineRegExp = /class {1}([A-Z]\w+) extends g.{1}(PrecisePath|SpeedPath|RShape){1}\n/;
        firstLineResult = firstLineRegExp.exec(source);
        if ((firstLineResult != null) && firstLineResult.length >= 2) {
          className = firstLineResult[1];
        } else {
          firstLineRegExp = /scriptName = {1}(("|')\w+("|'))\n/;
          firstLineResult = firstLineRegExp.exec(source);
          if ((firstLineResult != null) && firstLineResult.length >= 1) {
            className = firstLineResult[1];
          } else {
            return;
          }
        }
        if ((g[className] == null) || source === g[className].source) {
          return;
        }
        romanescoCode[className] = source;
        localStorage.romanescoCode = JSON.stringify(romanescoCode);
      };
      ce.editor.getSession().on('change', function(e) {
        g.deferredExecution(saveChanges, 'saveChanges', 1000);
      });
      runBtnJ = ce.editorJ.find("button.submit.run");
      runBtnJ.click(function(event) {
        g.runScript();
      });
      ce.pushRequest = function(data) {
        var callback, categoryJ, defaultCommitDescription, hasDescription, hasName, module, newModule, submit, title, _ref2, _ref3;
        if ((_ref2 = ce.module) != null ? _ref2.coreModule : void 0) {
          g.RModal.alert("Use the main <a href='https://github.com/RomanescoModules/Romanesco'>Romanesco repository</a> to update core modules.");
          return;
        }
        module = g.compileSource();
        if (module != null) {
          hasName = (module.name != null) && module.name !== '';
          hasDescription = (module.description != null) && module.description !== '';
          callback = function(results) {
            var textInputJ;
            if (!g.checkError(results)) {
              return;
            }
            g.RModal.modalJ.find(".modal-footer").show();
            g.RModal.initialize("Success");
            g.RModal.hideOnSubmit = true;
            g.RModal.addText(results.message);
            textInputJ = g.RModal.addTextInput('githubURL', null, null, null, 'Github repository URL');
            textInputJ.find('input').val(results.githubURL).select().focus();
            g.RModal.show();
            ce.module.lock.addModule(results.modulePk);
          };
          submit = function(data) {
            var args, _ref3;
            args = {
              name: ((_ref3 = ce.module) != null ? _ref3.name : void 0) || module.name || data.name,
              source: module.source,
              compiledSource: module.compiledSource,
              iconURL: module.iconURL,
              description: module.description || data.description,
              commitDescription: data != null ? data.commitDescription : void 0,
              githubURL: ce.module.githubURL,
              category: data.category,
              type: ce.module.type,
              lockPk: ce.module.lock.pk
            };
            Dajaxice.draw.addOrUpdateModule(callback, args);
            g.RModal.initialize("Loading");
            g.RModal.addText("Your request is being processed...");
            g.RModal.modalJ.find(".modal-footer").hide();
          };
          newModule = (ce.module == null) || ce.module.newModule;
          if ((newModule && (!hasName || !hasDescription)) || !newModule) {
            title = newModule ? 'Push new module' : 'Commit changes';
            g.RModal.initialize(title, submit, null, false);
            if (newModule) {
              if (!hasName) {
                g.RModal.addTextInput('name', 'Module name', null, null, 'Name', null, null, true);
              }
              if (!hasDescription) {
                g.RModal.addTextInput('description', 'Describe your module', null, null, 'Description', null, null, true);
              }
            }
            categoryJ = g.RModal.addTextInput('category', 'Optional category', null, null, 'Category');
            if (((_ref3 = ce.module) != null ? _ref3.category : void 0) != null) {
              categoryJ.text(ce.module.category);
            }
            defaultCommitDescription = newModule ? 'initial commit' : 'Describe your changes';
            g.RModal.addTextInput('commitDescription', defaultCommitDescription, null, null, 'Commit description', null, null, !newModule);
            g.RModal.show();
          } else {
            submit();
          }
        }
      };
      ce.pushRequestBtnJ.click(function(event) {
        ce.pushRequest();
      });
      closeBtnJ = ce.editorJ.find("button.close-editor");
      closeBtnJ.click(function(event) {
        ce.editorJ.hide();
        console.log = console.olog;
        console.error = console.oerror;
      });
      if (typeof console !== 'undefined') {
        console.olog = console.log || function() {};
        console.oerror = console.error || function() {};
      }
      g.logMessage = function(message) {
        if (typeof message !== 'string' || !message instanceof String) {
          message = JSON.stringify(message);
        }
        ce.consoleContentJ.append($("<p>").append(message));
        ce.consoleContentJ.scrollTop(ce.consoleContentJ[0].scrollHeight);
        if (ce.consoleJ.hasClass("closed")) {
          ce.consoleJ.addClass("highlight");
        }
      };
      g.logError = function(message) {
        ce.consoleContentJ.append($("<p>").append(message).addClass("error"));
        ce.consoleContentJ.scrollTop(ce.consoleContentJ[0].scrollHeight);
        ce.openConsole();
        message = "An error occured, you can open the debug console (Command + Option + I)";
        message += " to have more information about the problem.";
        g.romanesco_alert(message, "info");
      };
      g.log = console.log;
    };
    g.compileSource = function(source, name) {
      var className, compiledJS, description, descriptionResult, errorMessage, firstLineResult, iconResult, iconURL, location, message, nameResult, superClass;
      if (source == null) {
        source = ce.editor.getValue();
      }
      className = '';
      compiledJS = '';
      if (name == null) {
        name = ce.moduleInputJ.val();
      }
      description = '';
      iconURL = '';
      try {
        firstLineResult = /class ([A-Z]\w+) extends g.(PrecisePath|SpeedPath|RShape)\n/.exec(source);
        if ((firstLineResult != null) && firstLineResult.length > 2) {
          className = firstLineResult[1];
          superClass = firstLineResult[2];
        }
        iconResult = /@?iconURL = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((iconResult != null) && iconResult.length >= 2) {
          iconURL = iconResult[2];
        }
        descriptionResult = /@?rdescription = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((descriptionResult != null) && descriptionResult.length >= 2) {
          description = descriptionResult[2];
        }
        nameResult = /@?rname = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((nameResult != null) && nameResult.length >= 2) {
          name = nameResult[2];
        }
        compiledJS = CoffeeScript.compile(source, {
          bare: true
        });
      } catch (_error) {
        location = _error.location, message = _error.message;
        if (location != null) {
          errorMessage = "Error on line " + (location.first_line + 1) + ": " + message;
          if (message === "unmatched OUTDENT") {
            errorMessage += "\nThis error is generally due to indention problem or unbalanced parenthesis/brackets/braces.";
          }
        }
        console.error(errorMessage);
        return null;
      }
      return {
        name: name,
        className: className,
        source: source,
        compiledSource: compiledJS,
        description: description,
        iconURL: iconURL
      };
    };
    g.runScript = function(script) {
      var error, result;
      if (script == null) {
        script = g.compileSource();
      }
      if (script != null) {
        try {
          result = eval(script.compiledSource);
          try {
            console.log(result);
          } catch (_error) {
            error = _error;
            console.log(error);
          }
          if (g.lastPathCreated != null) {
            g.lastPathCreated.source = script.source;
            g.lastPathCreated = null;
          }
        } catch (_error) {
          error = _error;
          console.error(error);
          throw error;
          return null;
        }
      }
      return script;
    };
    g.compileAndRunModule = function(module) {
      g.runModule(g.compileSource(module.source, module.name));
    };
    g.runModule = function(module) {
      var error;
      try {
        console.log(eval(module.compiledSource));
        if (g.lastPathCreated != null) {
          g.lastPathCreated.source = module.source;
          g.lastPathCreated = null;
        }
      } catch (_error) {
        error = _error;
        console.error(error);
        throw error;
        return null;
      }
    };
    g.initializeEditor = function() {
      ce.editorJ.show();
      console.log = g.logMessage;
      console.error = g.logError;
    };
    g.showEditor = function(RItem) {
      ce = g.codeEditor;
      if (RItem != null) {
        ce.setSource(g.modules[RItem.rname]);
      } else {
        ce.initializeNewModuleFromName(g.codeExample);
      }
      g.initializeEditor();
    };
    ce.setLockModule = function(lock) {
      ce = g.codeEditor;
      if (lock.modulePk != null) {
        Dajaxice.draw.getModuleSource(ce.setSourceFromServer, {
          pk: lock.modulePk
        });
      } else {
        ce.initializeNewModuleFromName("MyLockModule", lock);
      }
      g.initializeEditor();
    };
  });

}).call(this);

//# sourceMappingURL=editor.map
