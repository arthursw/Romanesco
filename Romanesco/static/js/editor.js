// Generated by CoffeeScript 1.7.1
(function() {
  this.initCodeEditor = function() {
    var closeBtnJ, closeMessageBoxBtnJ, name, runBtnJ, saveChanges, source, toolUpdate_callback, _ref;
    g.editorJ = $(document.body).find("#codeEditor");
    g.sourceSelectorJ = g.editorJ.find(".source-selector");
    g.messageBoxJ = g.editorJ.find(".message-box");
    g.messageBoxContentJ = g.messageBoxJ.find(".content");
    g.codeEditorContentJ = g.editorJ.find("#codeEditorContent");
    g.pushRequestBtnJ = g.editorJ.find("button.request");
    g.codeEditorHandle = g.editorJ.find("div.handle");
    g.codeEditorHandle.mousedown(function() {
      g.draggingEditor = true;
    });
    g.sourceSelectorJ.append($("<option>").append(PrecisePath.name));
    g.sourceSelectorJ.append($("<option>").append(RectangleShape.name));
    g.sourceSelectorJ.append($("<option>").append(SpiralShape.name));
    g.sourceSelectorJ.append($("<option>").append(SketchPath.name));
    g.sourceSelectorJ.append($("<option>").append(SpiralPath.name));
    g.sourceSelectorJ.append($("<option>").append(ShapePath.name));
    g.sourceSelectorJ.append($("<option>").append(StarShape.name));
    g.sourceSelectorJ.append($("<option>").append(EllipseShape.name));
    g.sourceSelectorJ.append($("<option>").append(RollerPath.name));
    g.sourceSelectorJ.append($("<option>").append(FuzzyPath.name));
    if ((localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0) {
      _ref = JSON.parse(localStorage.romanescoCode);
      for (name in _ref) {
        source = _ref[name];
        g.sourceSelectorJ.append($("<option>").append("saved - " + name));
      }
    }
    g.sourceSelectorJ.change(function() {
      source = "";
      if (this.value.indexOf("saved - ") >= 0) {
        source = JSON.parse(localStorage.romanescoCode)[this.value.replace("saved - ", "")];
      }
      if (g[this.value] != null) {
        source = g[this.value].source;
      }
      if (source.length > 0) {
        g.editor.getSession().setValue(source);
      }
    });
    g.editor = ace.edit("codeEditorContent");
    g.editor.setTheme("ace/theme/monokai");
    g.editor.getSession().setUseSoftTabs(false);
    g.editor.getSession().setMode("ace/mode/coffee");
    g.editor.getSession().setValue("class TestPath extends PrecisePath\n  @rname = 'Test path'\n  @rdescription = \"Test path.\"\n\n  drawBegin: ()->\n\n    @initializeDrawing(false)\n\n    @path = @addPath()\n    return\n\n  drawUpdate: (length)->\n\n    point = @controlPath.getPointAt(length)\n    @path.add(point)\n    return\n\n  drawEnd: ()->\n    return\n", 1);
    saveChanges = function() {
      var className, firstLineRegExp, firstLineResult, romanescoCode;
      romanescoCode = (localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0 ? JSON.parse(localStorage.romanescoCode) : {};
      source = g.editor.getValue();
      className = '';
      firstLineRegExp = /class {1}([A-Z]\w+) extends {1}(PrecisePath|SpeedPath|RShape){1}\n/;
      firstLineResult = firstLineRegExp.exec(source);
      if ((firstLineResult != null) && firstLineResult.length >= 2) {
        className = firstLineResult[1];
      } else {
        firstLineRegExp = /scriptName = {1}(("|')\w+("|'))\n/;
        firstLineResult = firstLineRegExp.exec(source);
        if ((firstLineResult != null) && firstLineResult.length >= 1) {
          className = firstLineResult[1];
        } else {
          return;
        }
      }
      if ((g[className] == null) || source === g[className].source) {
        return;
      }
      romanescoCode[className] = source;
      localStorage.romanescoCode = JSON.stringify(romanescoCode);
    };
    g.editor.getSession().on('change', function(e) {
      g.defferedExecution(saveChanges, 1000);
    });
    runBtnJ = g.editorJ.find("button.submit.run");
    runBtnJ.click(function(event) {
      g.runScript();
    });
    toolUpdate_callback = (function(_this) {
      return function(result) {
        g.checkError(result);
      };
    })(this);
    g.pushRequestBtnJ.click(function(event) {
      var tool;
      tool = compileSource();
      if (tool != null) {
        if (g.editorJ.rNewtool) {
          Dajaxice.draw.addTool(toolUpdate_callback, {
            'name': tool.name,
            'className': tool.className,
            'source': tool.source,
            'compiledSource': tool.compiledSource,
            'isTool': tool.isTool
          });
        } else {
          Dajaxice.draw.updateTool(toolUpdate_callback, {
            'name': tool.name,
            'className': tool.className,
            'source': tool.source,
            'compiledSource': tool.compiledSource
          });
        }
      }
    });
    closeBtnJ = g.editorJ.find("button.close-editor");
    closeBtnJ.click(function(event) {
      g.editorJ.hide();
      console.log = console.olog;
      console.error = console.oerror;
    });
    closeMessageBoxBtnJ = g.editorJ.find("button.close-message-box");
    closeMessageBoxBtnJ.click(function(event) {
      g.messageBoxJ.hide();
      g.codeEditorContentJ.removeClass('message');
    });
    if (typeof console !== 'undefined') {
      console.olog = console.log || function() {};
      console.oerror = console.error || function() {};
    }
    g.logMessage = function(message) {
      console.olog(message);
      g.messageBoxContentJ.append($("<p>").append(message));
      g.messageBoxContentJ.scrollTop(g.messageBoxContentJ[0].scrollHeight);
      g.messageBoxJ.show();
    };
    g.logError = function(message) {
      g.messageBoxContentJ.append($("<p>").append(message).addClass("error"));
      g.messageBoxContentJ.scrollTop(g.messageBoxContentJ[0].scrollHeight);
      g.messageBoxJ.show();
      romanesco_alert("An error occured, you can open the debug console (Command + Option + I) to have more information about the problem.", "info");
    };
    return g.log = console.log;
  };

  this.compileSource = function() {
    var className, compiledJS, errorMessage, firstLineRegExp, firstLineResult, isTool, location, message, rname, rnameResult, source, superClass;
    source = g.editor.getValue();
    className = '';
    compiledJS = '';
    rname = '';
    isTool = false;
    try {
      firstLineRegExp = /class {1}([A-Z]\w+) extends {1}(PrecisePath|SpeedPath|RShape){1}\n/;
      firstLineResult = firstLineRegExp.exec(source);
      isTool = (firstLineResult != null) && firstLineResult.length >= 2;
      if (isTool) {
        className = firstLineResult[1];
        superClass = firstLineResult[2];
        source += "\n@" + className + " = " + className;
        rnameResult = /@rname = {1}(\'.*)/.exec(source);
        if ((rnameResult != null) && rnameResult.length >= 1) {
          rname = rnameResult[1];
        } else {
          throw {
            location: 'NA',
            message: '@rname is not correctly set. There must be something like @rname = "your path name"'
          };
        }
      } else {
        firstLineRegExp = /scriptName = {1}(("|')\w+("|'))\n/;
        firstLineResult = firstLineRegExp.exec(source);
        if ((firstLineResult != null) && firstLineResult.length >= 1) {
          rname = firstLineResult[1];
          className = rname;
        } else {
          throw {
            location: 'NA',
            message: "scriptName or class name is not correctly set.\nYour script can be either a normal script or a tool class.\nA normal script must begin with 'scriptName = \"yourScriptName\"'.\nA tool class must begin with \"class YourToolName extends SuperClass\".\nSuperClass can be \"PrecisePath\", \"SpeedPath\" or \"RShape\".\nThere must not be any comment or white character after the first line."
          };
        }
      }
      compiledJS = CoffeeScript.compile(source, {
        bare: true
      });
      g.messageBoxJ.removeClass('error');
      g.messageBoxJ.hide();
      g.codeEditorContentJ.removeClass('message');
    } catch (_error) {
      location = _error.location, message = _error.message;
      if (location != null) {
        errorMessage = "Error on line " + (location.first_line + 1) + ": " + message;
        if (message === "unmatched OUTDENT") {
          errorMessage += "\nThis error is generally due to indention problem or unbalanced parenthesis/brackets/braces.";
        }
      }
      console.error(errorMessage);
      return null;
    }
    return {
      name: rname,
      className: className,
      source: source,
      compiledSource: compiledJS,
      isTool: isTool
    };
  };

  this.runScript = function(script) {
    var className, error, justCreated, newTool;
    justCreated = script == null;
    if (script == null) {
      script = compileSource();
    }
    if (script != null) {
      try {
        eval(script.compiledSource);
        if (script.isTool) {
          if (g.tools[script.rname] != null) {
            g.tools[script.rname].remove();
            delete this[script.className];
          }
          className = (script.originalClassName != null) && script.originalClassName.length > 0 ? script.originalClassName : script.className;
          newTool = new PathTool(this[className], justCreated);
          newTool.RPath.source = script.source;
          if (justCreated) {
            newTool.select();
          }
        }
      } catch (_error) {
        error = _error;
        console.error(error);
        throw error;
        return null;
      }
    }
    return script;
  };

  this.toolEditor = function(RPath) {
    g.editor.getSession().setValue(RPath != null ? RPath.source : g.codeExample);
    g.editorJ.show();
    console.log = g.logMessage;
    console.error = g.logError;
    g.editorJ.rNewtool = RPath == null;
    if (RPath != null) {
      g.pushRequestBtnJ.text('Push request (update "' + RPath.rname + '" tool)');
    } else {
      g.pushRequestBtnJ.text('Push request (create new tool)');
    }
  };

  this.acceptTool = function(tool) {
    var acceptTool_callback;
    acceptTool_callback = function(result) {
      return g.checkError(result);
    };
    Dajaxice.draw.acceptTool(acceptTool_callback, {
      'name': tool.name
    });
  };

  this.getWaitingTools = function(value) {
    var getWaitingTools_callback;
    getWaitingTools_callback = function(result) {
      if (g.checkError(result)) {
        g.waitingTools = JSON.parse(result.tools);
        console.log(g.waitingTools);
      }
    };
    Dajaxice.draw.getWaitingTools(getWaitingTools_callback, {});
  };

}).call(this);

//# sourceMappingURL=editor.map
