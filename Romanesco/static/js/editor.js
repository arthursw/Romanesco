// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils', 'coffee', 'ace', 'aceTools', 'jquery', 'typeahead'], function(utils, CoffeeScript) {
    var ce, g;
    if (typeof ace === "undefined" || ace === null) {
      require(['ace'], function() {
        debugger;
      });
    }
    g = utils.g();
    g.codeEditor = {};
    ce = g.codeEditor;
    ce.MAX_COMMANDS = 50;
    ce.commandQueue = [];
    ce.commandIndex = -1;
    ce.initializeModuleInput = function() {
      var getSource, initializeNewModuleFromName, input;
      input = ce.moduleInputJ;
      ce.moduleNameValue = null;
      input.typeahead({
        hint: true,
        highlight: true,
        minLength: 1
      }, {
        valueKey: 'value',
        displayKey: 'value',
        source: g.typeaheadModuleEngine.ttAdapter()
      });
      input.on('typeahead:opened', function() {});
      getSource = function(result) {
        ce.editor.getSession().setValue(source);
        ce.editor.newTool = false;
      };
      initializeNewModuleFromName = function(moduleName) {
        var source;
        source = "class " + moduleName + " extends g.PrecisePath\n";
        source += "\t@rname = '" + moduleName + "'\n";
        source += "\t@rdescription = '" + moduleName + "'\n";
        source += "\t\n	drawBegin: ()->\n\n		@initializeDrawing(false)\n\n		@path = @addPath()\n		return\n\n	drawUpdateStep: (length)->\n\n		point = @controlPath.getPointAt(length)\n		@path.add(point)\n		return\n\n	drawEnd: ()->\n		return\n";
        ce.editor.getSession().setValue(source);
        ce.editor.newTool = true;
      };
      input.on('typeahead:closed', function() {
        var moduleName;
        moduleName = input.val();
        if (moduleName === '') {
          return;
        }
        if (ce.moduleNameValue === moduleName) {
          Dajaxice.draw.getSource(getSource, {
            moduleName: moduleName
          });
        } else {
          initializeNewModuleFromName(moduleName);
        }
      });
      input.on('typeahead:cursorchanged', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
      input.on('typeahead:selected', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
      input.on('typeahead:autocompleted', function(event, suggestions, name) {
        ce.moduleNameValue = input.val();
      });
    };
    g.initCodeEditor = function() {
      var closeBtnJ, name, pathClass, runBtnJ, saveChanges, source, _i, _len, _ref, _ref1;
      ce.editorJ = $(document.body).find("#codeEditor");
      ce.sourceSelectorJ = ce.editorJ.find(".source-selector");
      ce.moduleInputJ = ce.editorJ.find(".header .search input");
      ce.consoleJ = ce.editorJ.find(".console");
      ce.consoleContentJ = ce.consoleJ.find(".content");
      ce.codeJ = ce.editorJ.find(".code");
      ce.pushRequestBtnJ = ce.editorJ.find("button.request");
      ce.handleJ = ce.editorJ.find(".editor-handle");
      ce.consoleHandleJ = ce.editorJ.find(".console-handle");
      ce.consoleCloseBtnJ = ce.consoleHandleJ.find(".close");
      ce.footerJ = ce.editorJ.find(".footer");
      ce.editor = ace.edit(ce.codeJ[0]);
      ce.editor.$blockScrolling = Infinity;
      ce.editor.setOptions({
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: false
      });
      ce.editor.setTheme("ace/theme/monokai");
      ce.editor.getSession().setUseSoftTabs(false);
      ce.editor.getSession().setMode("ace/mode/coffee");
      ce.editor.getSession().setValue("class TestPath extends g.PrecisePath\n  @rname = 'Test path'\n  @rdescription = \"Test path.\"\n\n  drawBegin: ()->\n\n    @initializeDrawing(false)\n\n    @path = @addPath()\n    return\n\n  drawUpdateStep: (length)->\n\n    point = @controlPath.getPointAt(length)\n    @path.add(point)\n    return\n\n  drawEnd: ()->\n    return\n", 1);
      ce.editor.commands.addCommand({
        name: 'execute',
        bindKey: {
          win: 'Ctrl-Shift-Enter',
          mac: 'Command-Shift-Enter',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          g.runScript();
        }
      });
      ce.addCommand = function(command) {
        ce.commandQueue.push(command);
        if (ce.commandQueue.length > ce.MAX_COMMANDS) {
          ce.commandQueue.shift();
        }
        ce.commandIndex = ce.commandQueue.length;
      };
      ce.editor.commands.addCommand({
        name: 'execute-command',
        bindKey: {
          win: 'Ctrl-Enter',
          mac: 'Command-Enter',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var command;
          command = ce.editor.getValue();
          if (command.length === 0) {
            return;
          }
          ce.addCommand(command);
          g.runScript();
          ce.editor.setValue('');
        }
      });
      ce.editor.commands.addCommand({
        name: 'previous-command',
        bindKey: {
          win: 'Ctrl-Up',
          mac: 'Command-Up',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var command, cursorPosition;
          cursorPosition = ce.editor.getCursorPosition();
          if (cursorPosition.row === 0 && cursorPosition.column === 0) {
            if (ce.commandIndex === ce.commandQueue.length) {
              command = ce.editor.getValue();
              if (command.length > 0) {
                ce.addCommand(command);
                ce.commandIndex--;
              }
            }
            if (ce.commandIndex > 0) {
              ce.commandIndex--;
              ce.editor.setValue(ce.commandQueue[ce.commandIndex]);
            }
          } else {
            ce.editor.gotoLine(0, 0);
          }
        }
      });
      ce.editor.commands.addCommand({
        name: 'next-command',
        bindKey: {
          win: 'Ctrl-Down',
          mac: 'Command-Down',
          sender: 'editor|cli'
        },
        exec: function(env, args, request) {
          var cursorPosition, lastColumn, lastRow;
          cursorPosition = ce.editor.getCursorPosition();
          lastRow = ce.editor.getSession().getLength() - 1;
          lastColumn = ce.editor.getSession().getLine(lastRow).length;
          if (cursorPosition.row === lastRow && cursorPosition.column === lastColumn) {
            if (ce.commandIndex < ce.commandQueue.length - 1) {
              ce.commandIndex++;
              ce.editor.setValue(ce.commandQueue[ce.commandIndex]);
            }
          } else {
            ce.editor.gotoLine(lastRow + 1, lastColumn + 1);
          }
        }
      });
      ce.handleJ.mousedown(function() {
        ce.draggingEditor = true;
        $("body").css({
          'user-select': 'none'
        });
      });
      ce.consoleHandleJ.mousedown(function() {
        ce.draggingConsole = true;
        $("body").css({
          'user-select': 'none'
        });
      });
      ce.consoleHeight = 200;
      ce.closeConsole = function(consoleHeight) {
        if (consoleHeight == null) {
          consoleHeight = null;
        }
        ce.consoleHeight = consoleHeight || ce.consoleJ.height();
        ce.consoleJ.css({
          height: 0
        }).addClass('closed');
        ce.consoleCloseBtnJ.find('.glyphicon').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
        ce.editor.resize();
      };
      ce.openConsole = function(consoleHeight) {
        if (consoleHeight == null) {
          consoleHeight = null;
        }
        if (ce.consoleJ.hasClass('closed')) {
          ce.consoleJ.css({
            height: consoleHeight || ce.consoleHeight
          }).removeClass('closed');
          ce.consoleCloseBtnJ.find('.glyphicon').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
          ce.editor.resize();
        }
      };
      ce.consoleCloseBtnJ.click(function() {
        if (ce.consoleJ.hasClass('closed')) {
          ce.openConsole();
        } else {
          ce.closeConsole();
        }
      });
      ce.mousemove = function(event) {
        var bottom, footerHeight, height, minHeight;
        if (ce.draggingEditor) {
          ce.editorJ.css({
            right: window.innerWidth - event.pageX
          });
        }
        if (ce.draggingConsole) {
          footerHeight = ce.footerJ.outerHeight();
          bottom = ce.editorJ.outerHeight() - footerHeight;
          height = Math.min(bottom - event.pageY, window.innerHeight - footerHeight);
          ce.consoleJ.css({
            height: height
          });
          minHeight = 20;
          if (ce.consoleJ.hasClass('closed')) {
            if (height > minHeight) {
              ce.openConsole(height);
            }
          } else {
            if (height <= minHeight) {
              ce.closeConsole(200);
            }
          }
        }
      };
      ce.editorJ.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
        g.codeEditor.editor.resize();
      });
      ce.mouseup = function(event) {
        if (ce.draggingEditor || ce.draggingConsole) {
          g.codeEditor.editor.resize();
        }
        ce.draggingEditor = false;
        ce.draggingConsole = false;
        $("body").css({
          'user-select': 'text'
        });
      };
      _ref = g.pathClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pathClass = _ref[_i];
        ce.sourceSelectorJ.append($("<option>").append(pathClass.name));
      }
      if ((localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0) {
        _ref1 = JSON.parse(localStorage.romanescoCode);
        for (name in _ref1) {
          source = _ref1[name];
          ce.sourceSelectorJ.append($("<option>").append("saved - " + name));
        }
      }
      ce.sourceSelectorJ.change(function() {
        source = "";
        if (this.value.indexOf("saved - ") >= 0) {
          source = JSON.parse(localStorage.romanescoCode)[this.value.replace("saved - ", "")];
        }
        if (g[this.value] != null) {
          source = g[this.value].source;
        }
        if (source.length > 0) {
          ce.editor.getSession().setValue(source);
        }
      });
      saveChanges = function() {
        var className, firstLineRegExp, firstLineResult, romanescoCode;
        romanescoCode = {};
        if ((localStorage.romanescoCode != null) && localStorage.romanescoCode.length > 0) {
          romanescoCode = JSON.parse(localStorage.romanescoCode);
        }
        source = ce.editor.getValue();
        className = '';
        firstLineRegExp = /class {1}([A-Z]\w+) extends g.{1}(PrecisePath|SpeedPath|RShape){1}\n/;
        firstLineResult = firstLineRegExp.exec(source);
        if ((firstLineResult != null) && firstLineResult.length >= 2) {
          className = firstLineResult[1];
        } else {
          firstLineRegExp = /scriptName = {1}(("|')\w+("|'))\n/;
          firstLineResult = firstLineRegExp.exec(source);
          if ((firstLineResult != null) && firstLineResult.length >= 1) {
            className = firstLineResult[1];
          } else {
            return;
          }
        }
        if ((g[className] == null) || source === g[className].source) {
          return;
        }
        romanescoCode[className] = source;
        localStorage.romanescoCode = JSON.stringify(romanescoCode);
      };
      ce.editor.getSession().on('change', function(e) {
        g.deferredExecution(saveChanges, 'saveChanges', 1000);
      });
      runBtnJ = ce.editorJ.find("button.submit.run");
      runBtnJ.click(function(event) {
        g.runScript();
      });
      ce.pushRequest = function() {
        var args, tool;
        tool = g.compileSource();
        if ((tool.name == null) || tool.name === '') {
          g.romanesco_alert("You must set a name for the module.");
          return;
        }
        if (tool != null) {
          args = {
            name: tool.name,
            className: tool.className,
            source: tool.source,
            compiledSource: tool.compiledSource,
            iconURL: tool.iconURL
          };
          Dajaxice.draw.addOrUpdateModule(g.checkError, args);
        }
      };
      ce.pushRequestBtnJ.click(function(event) {
        ce.pushRequest();
      });
      closeBtnJ = ce.editorJ.find("button.close-editor");
      closeBtnJ.click(function(event) {
        ce.editorJ.hide();
        console.log = console.olog;
        console.error = console.oerror;
      });
      if (typeof console !== 'undefined') {
        console.olog = console.log || function() {};
        console.oerror = console.error || function() {};
      }
      g.logMessage = function(message) {
        if (typeof message !== 'string' || !message instanceof String) {
          message = JSON.stringify(message);
        }
        ce.consoleContentJ.append($("<p>").append(message));
        ce.consoleContentJ.scrollTop(ce.consoleContentJ[0].scrollHeight);
        ce.openConsole();
      };
      g.logError = function(message) {
        ce.consoleContentJ.append($("<p>").append(message).addClass("error"));
        ce.consoleContentJ.scrollTop(ce.consoleContentJ[0].scrollHeight);
        ce.openConsole();
        message = "An error occured, you can open the debug console (Command + Option + I)";
        message += " to have more information about the problem.";
        g.romanesco_alert(message, "info");
      };
      return g.log = console.log;
    };
    g.compileSource = function() {
      var className, compiledJS, errorMessage, firstLineRegExp, firstLineResult, iconResult, iconURL, isTool, location, message, rname, rnameResult, source, superClass;
      source = ce.editor.getValue();
      className = '';
      compiledJS = '';
      rname = ce.moduleInputJ.val();
      iconURL = '';
      isTool = false;
      try {
        firstLineRegExp = /class {1}([A-Z]\w+) extends g.{1}(PrecisePath|SpeedPath|RShape){1}\n/;
        firstLineResult = firstLineRegExp.exec(source);
        isTool = (firstLineResult != null) && firstLineResult.length >= 2;
        iconResult = /@?iconURL = {1}((\'|\"|\"\"\").*(\'|\"|\"\"\"))/.exec(source);
        if ((iconResult != null) && iconResult.length >= 1) {
          iconURL = iconResult[1];
        }
        if (isTool) {
          className = firstLineResult[1];
          superClass = firstLineResult[2];
          source += "\ng." + className + " = " + className;
          rnameResult = /@rname = {1}(\'.*)/.exec(source);
          if ((rnameResult != null) && rnameResult.length >= 1) {
            rname = rnameResult[1];
          } else {
            message = '@rname is not correctly set. There must be something like @rname = "your path name"';
            throw {
              location: 'NA',
              message: message
            };
          }
        }
        compiledJS = CoffeeScript.compile(source, {
          bare: true
        });
      } catch (_error) {
        location = _error.location, message = _error.message;
        if (location != null) {
          errorMessage = "Error on line " + (location.first_line + 1) + ": " + message;
          if (message === "unmatched OUTDENT") {
            errorMessage += "\nThis error is generally due to indention problem or unbalanced parenthesis/brackets/braces.";
          }
        }
        console.error(errorMessage);
        return null;
      }
      return {
        name: rname,
        className: className,
        source: source,
        compiledSource: compiledJS,
        isTool: isTool,
        iconURL: iconURL
      };
    };
    g.runScript = function(script) {
      var className, error, justCreated, newTool;
      justCreated = script == null;
      if (script == null) {
        script = g.compileSource();
      }
      if (script != null) {
        try {
          console.log(eval(script.compiledSource));
          if (script.isTool) {
            if (g.tools[script.rname] != null) {
              g.tools[script.rname].remove();
              delete this[script.className];
            }
            className = null;
            if ((script.originalClassName != null) && script.originalClassName.length > 0) {
              className = script.originalClassName;
            } else {
              className = script.className;
            }
            newTool = new g.PathTool(this[className], justCreated);
            newTool.RPath.source = script.source;
            if (justCreated) {
              newTool.select();
            }
          }
        } catch (_error) {
          error = _error;
          console.error(error);
          throw error;
          return null;
        }
      }
      return script;
    };
    g.toolEditor = function(RPath) {
      var editorJ;
      ce.editor.getSession().setValue(RPath != null ? RPath.source : g.codeExample);
      editorJ = ce.editorJ;
      editorJ.show();
      console.log = g.logMessage;
      console.error = g.logError;
      editorJ.rNewtool = RPath == null;
      if (RPath != null) {
        g.codeEditor.pushRequestBtnJ.text('Push request (update "' + RPath.rname + '" tool)');
      } else {
        g.codeEditor.pushRequestBtnJ.text('Push request (create new tool)');
      }
    };
    g.acceptTool = function(tool) {
      var acceptToolCallback;
      acceptToolCallback = function(result) {
        return g.checkError(result);
      };
      Dajaxice.draw.acceptTool(acceptToolCallback, {
        'name': tool.name
      });
    };
    g.getWaitingTools = function(value) {
      var getWaitingToolsCallback;
      getWaitingToolsCallback = function(result) {
        if (g.checkError(result)) {
          g.waitingTools = JSON.parse(result.tools);
          console.log(g.waitingTools);
        }
      };
      Dajaxice.draw.getWaitingTools(getWaitingToolsCallback, {});
    };
  });

}).call(this);

//# sourceMappingURL=editor.map
