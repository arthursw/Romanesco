// Generated by CoffeeScript 1.7.1
(function() {
  var CarTool, CodeTool, DivTool, LockTool, MediaTool, MoveTool, PathTool, RTool, ScreenshotTool, SelectTool, TextTool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RTool = (function() {
    RTool.parameters = function() {
      return {};
    };

    function RTool(name, cursorPosition, cursorDefault) {
      var description, popoverOptions;
      this.name = name;
      this.cursorPosition = cursorPosition != null ? cursorPosition : {
        x: 0,
        y: 0
      };
      this.cursorDefault = cursorDefault != null ? cursorDefault : "default";
      g.tools[this.name] = this;
      if (this.btnJ == null) {
        this.btnJ = g.toolsJ.find('li[data-type="' + this.name + '"]');
      }
      this.cursorName = this.btnJ.attr("data-cursor");
      this.btnJ.click((function(_this) {
        return function() {
          return _this.select();
        };
      })(this));
      popoverOptions = {
        placement: 'right',
        container: 'body',
        trigger: 'hover',
        delay: {
          show: 500,
          hide: 100
        }
      };
      description = this.description();
      if (description == null) {
        popoverOptions.content = this.name;
      } else {
        popoverOptions.title = this.name;
        popoverOptions.content = description;
      }
      this.btnJ.popover(popoverOptions);
    }

    RTool.prototype.description = function() {
      return null;
    };

    RTool.prototype.select = function(constructor, selectedItem) {
      var differentTool, _ref;
      if (constructor == null) {
        constructor = this.constructor;
      }
      if (selectedItem == null) {
        selectedItem = null;
      }
      differentTool = g.previousTool !== g.selectedTool;
      if (this !== g.selectedTool) {
        g.previousTool = g.selectedTool;
      }
      if ((_ref = g.selectedTool) != null) {
        _ref.deselect();
      }
      g.selectedTool = this;
      g.deselectAll();
      if (this.cursorName != null) {
        g.stageJ.css('cursor', 'url(static/images/cursors/' + this.cursorName + '.png) ' + this.cursorPosition.x + ' ' + this.cursorPosition.y + ',' + this.cursorDefault);
      } else {
        g.stageJ.css('cursor', this.cursorDefault);
      }
      g.updateParameters({
        tool: constructor,
        item: selectedItem
      }, differentTool);
    };

    RTool.prototype.deselect = function() {};

    RTool.prototype.begin = function(event) {};

    RTool.prototype.update = function(event) {};

    RTool.prototype.move = function(event) {};

    RTool.prototype.end = function(event) {};

    RTool.prototype.disableSnap = function() {
      return false;
    };

    return RTool;

  })();

  this.RTool = RTool;

  CodeTool = (function(_super) {
    __extends(CodeTool, _super);

    function CodeTool() {
      CodeTool.__super__.constructor.call(this, "Script");
    }

    CodeTool.prototype.select = function() {
      CodeTool.__super__.select.call(this);
      return g.toolEditor();
    };

    return CodeTool;

  })(RTool);

  this.CodeTool = CodeTool;

  MoveTool = (function(_super) {
    __extends(MoveTool, _super);

    function MoveTool() {
      MoveTool.__super__.constructor.call(this, "Move", {
        x: 32,
        y: 32
      }, "move");
      this.prevPoint = {
        x: 0,
        y: 0
      };
      this.dragging = false;
    }

    MoveTool.prototype.select = function() {
      var div, _i, _len, _ref, _results;
      MoveTool.__super__.select.call(this);
      g.stageJ.addClass("moveTool");
      _ref = g.divs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        div = _ref[_i];
        _results.push(div.disableInteraction());
      }
      return _results;
    };

    MoveTool.prototype.deselect = function() {
      var div, _i, _len, _ref;
      MoveTool.__super__.deselect.call(this);
      g.stageJ.removeClass("moveTool");
      _ref = g.divs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        div = _ref[_i];
        div.enableInteraction();
      }
    };

    MoveTool.prototype.begin = function(event) {};

    MoveTool.prototype.update = function(event) {};

    MoveTool.prototype.end = function(event) {};

    MoveTool.prototype.beginNative = function(event) {
      this.dragging = true;
      this.prevPoint = {
        x: event.pageX,
        y: event.pageY
      };
    };

    MoveTool.prototype.updateNative = function(event) {
      if (this.dragging) {
        g.RMoveBy({
          x: (this.prevPoint.x - event.pageX) / view.zoom,
          y: (this.prevPoint.y - event.pageY) / view.zoom
        });
        this.prevPoint = {
          x: event.pageX,
          y: event.pageY
        };
      }
    };

    MoveTool.prototype.endNative = function(event) {
      this.dragging = false;
    };

    return MoveTool;

  })(RTool);

  this.MoveTool = MoveTool;

  CarTool = (function(_super) {
    __extends(CarTool, _super);

    CarTool.parameters = function() {
      var parameters;
      parameters = {
        'Car': {
          speed: {
            type: 'input',
            label: 'Speed',
            value: '0',
            addController: true,
            onChange: function() {}
          }
        }
      };
      return parameters;
    };

    function CarTool() {
      CarTool.__super__.constructor.call(this, "Car", {
        x: 0,
        y: 0
      }, "none");
      this.prevPoint = {
        x: 0,
        y: 0
      };
      this.dragging = false;
    }

    CarTool.prototype.select = function() {
      var url;
      CarTool.__super__.select.call(this);
      url = "/static/images/car.png";
      this.car = new Raster(url);
      g.carLayer.addChild(this.car);
      this.car.position = view.center;
      this.speed = 0;
      this.direction = new Point(0, -1);
      this.car.onLoad = (function(_this) {
        return function() {
          console.log('car loaded');
        };
      })(this);
      this.previousSpeed = 0;
      g.sound.setVolume(0.1);
      g.sound.play(0);
      g.sound.setLoopStart(3.26);
      g.sound.setLoopEnd(5.22);
      this.lastUpdate = Date.now();
    };

    CarTool.prototype.deselect = function() {
      CarTool.__super__.deselect.call(this);
      this.car.remove();
      this.car = null;
      g.sound.stop();
    };

    CarTool.prototype.onFrame = function() {
      var maxRate, maxSpeed, minRate, minSpeed, rate, _ref, _ref1, _ref2;
      if (this.car == null) {
        return;
      }
      minSpeed = 0.05;
      maxSpeed = 100;
      if (Key.isDown('right')) {
        this.direction.angle += 5;
      }
      if (Key.isDown('left')) {
        this.direction.angle -= 5;
      }
      if (Key.isDown('up')) {
        if (this.speed < maxSpeed) {
          this.speed++;
        }
      } else if (Key.isDown('down')) {
        if (this.speed > -maxSpeed) {
          this.speed--;
        }
      } else {
        this.speed *= 0.9;
        if (Math.abs(this.speed) < minSpeed) {
          this.speed = 0;
        }
      }
      minRate = 0.25;
      maxRate = 3;
      rate = minRate + Math.abs(this.speed) / maxSpeed * (maxRate - minRate);
      g.sound.setRate(rate);
      this.previousSpeed = this.speed;
      if ((_ref = this.parameterControllers) != null) {
        if ((_ref1 = _ref['speed']) != null) {
          _ref1.setValue(this.speed.toFixed(2));
        }
      }
      this.car.rotation = this.direction.angle + 90;
      if (Math.abs(this.speed) > minSpeed) {
        this.car.position = this.car.position.add(this.direction.multiply(this.speed));
        g.RMoveTo(this.car.position);
      }
      if ((_ref2 = g.gameAt(this.car.position)) != null) {
        _ref2.updateGame(this);
      }
      if (Date.now() - this.lastUpdate > 150) {
        if (g.me != null) {
          g.chatSocket.emit("car move", g.me, this.car.position, this.car.rotation, this.speed);
        }
        this.lastUpdate = Date.now();
      }
    };

    return CarTool;

  })(RTool);

  this.CarTool = CarTool;

  SelectTool = (function(_super) {
    var hitOptions;

    __extends(SelectTool, _super);

    hitOptions = {
      stroke: true,
      fill: true,
      handles: true,
      segments: true,
      curves: true,
      tolerance: 5
    };

    function SelectTool() {
      SelectTool.__super__.constructor.call(this, "Select");
      this.selectedItem = null;
    }

    SelectTool.prototype.select = function() {
      var _ref;
      this.selectedItem = g.selectedItems().first();
      return SelectTool.__super__.select.call(this, ((_ref = this.selectedItem) != null ? _ref.constructor : void 0) || this.constructor, this.selectedItem);
    };

    SelectTool.prototype.createSelectionRectangle = function(event) {
      var _ref;
      if ((_ref = g.currentPaths[g.me]) != null) {
        _ref.remove();
      }
      g.currentPaths[g.me] = new Path.Rectangle(event.downPoint, event.point);
      g.currentPaths[g.me].name = 'select tool selection rectangle';
      g.currentPaths[g.me].strokeColor = g.selectionBlue;
      g.currentPaths[g.me].dashArray = [10, 4];
    };

    SelectTool.prototype.removeSelectionGroup = function() {
      g.deselectAll();
      if (g.selectionGroup == null) {
        return;
      }
      project.activeLayer.addChildren(g.selectionGroup.removeChildren());
      g.selectionGroup.remove();
      g.selectionGroup = null;
    };

    SelectTool.prototype.begin = function(event) {
      var hitResult, name, path, _base, _ref, _ref1;
      console.log("select begin");
      _ref = g.paths;
      for (name in _ref) {
        path = _ref[name];
        path.prepareHitTest();
      }
      hitResult = g.project.hitTest(event.point, hitOptions);
      _ref1 = g.paths;
      for (name in _ref1) {
        path = _ref1[name];
        path.finishHitTest();
      }
      if (hitResult && (hitResult.item.controller != null)) {
        this.selectedItem = hitResult.item.controller;
        if (!event.modifiers.shift) {
          if (g.selectionGroup != null) {
            if (!g.selectionGroup.isAncestor(hitResult.item)) {
              this.removeSelectionGroup();
            }
          } else {
            if (g.selectedDivs.length > 0) {
              g.deselectAll();
            }
          }
        }
        return typeof (_base = hitResult.item.controller).selectBegin === "function" ? _base.selectBegin(event) : void 0;
      } else {
        this.removeSelectionGroup();
        return this.createSelectionRectangle(event);
      }
    };

    SelectTool.prototype.update = function(event) {
      var item, _i, _len, _ref;
      if (!g.currentPaths[g.me]) {
        _ref = g.selectedItems();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (typeof item.selectUpdate === "function") {
            item.selectUpdate(event);
          }
        }
      } else {
        this.createSelectionRectangle(event);
      }
    };

    SelectTool.prototype.end = function(event) {
      var item, itemsToSelect, name, rectangle, _i, _len, _ref, _ref1;
      if (!g.currentPaths[g.me]) {
        _ref = g.selectedItems();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (typeof item.selectEnd === "function") {
            item.selectEnd(event);
          }
        }
      } else {
        rectangle = new Rectangle(event.downPoint, event.point);
        itemsToSelect = [];
        _ref1 = g.items;
        for (name in _ref1) {
          item = _ref1[name];
          if (item.getBounds().intersects(rectangle)) {
            item.select(false);
            itemsToSelect.push(item);
          }
        }
        itemsToSelect = itemsToSelect.map(function(item) {
          return {
            tool: item.constructor,
            item: item
          };
        });
        g.updateParameters(itemsToSelect);
        g.currentPaths[g.me].remove();
        delete g.currentPaths[g.me];
      }
    };

    SelectTool.prototype.doubleClick = function(event) {
      var item, _i, _len, _ref;
      _ref = g.selectedItems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (typeof item.doubleClick === "function") {
          item.doubleClick(event);
        }
      }
    };

    SelectTool.prototype.disableSnap = function() {
      return g.currentPaths[g.me] != null;
    };

    return SelectTool;

  })(RTool);

  this.SelectTool = SelectTool;

  PathTool = (function(_super) {
    __extends(PathTool, _super);

    function PathTool(RPath, justCreated) {
      var favorite, name, shortNameJ, toolNameJ, word, words, _i, _len, _ref;
      this.RPath = RPath;
      if (justCreated == null) {
        justCreated = false;
      }
      this.name = this.RPath.rname;
      favorite = justCreated | ((_ref = g.favoriteTools) != null ? _ref.indexOf(this.name) : void 0) >= 0;
      this.btnJ = g.toolsJ.find('li[data-type="' + this.name + '"]');
      if (this.btnJ.length === 0) {
        this.btnJ = $("<li>");
        this.btnJ.attr("data-type", this.name);
        this.btnJ.attr("alt", this.name);
        if (this.RPath.iconUrl != null) {
          this.btnJ.append('<img src="' + this.RPath.iconUrl + '" alt="' + this.RPath.iconAlt + '">');
        } else {
          this.btnJ.addClass("text-btn");
          name = "";
          words = this.name.split(" ");
          if (words.length > 1) {
            for (_i = 0, _len = words.length; _i < _len; _i++) {
              word = words[_i];
              name += word.substring(0, 1);
            }
          } else {
            name += this.name.substring(0, 2);
          }
          shortNameJ = $('<span class="short-name">').text(name + ".");
          this.btnJ.append(shortNameJ);
        }
        if (favorite) {
          g.favoriteToolsJ.append(this.btnJ);
        } else {
          g.allToolsJ.append(this.btnJ);
        }
      }
      toolNameJ = $('<span class="tool-name">').text(this.name);
      this.btnJ.append(toolNameJ);
      this.btnJ.addClass("tool-btn");
      PathTool.__super__.constructor.call(this, this.RPath.rname, this.RPath.cursorPosition, this.RPath.cursorDefault, this.RPath.options);
      return;
    }

    PathTool.prototype.description = function() {
      return this.RPath.rdescription;
    };

    PathTool.prototype.remove = function() {
      this.btnJ.remove();
    };

    PathTool.prototype.select = function() {
      PathTool.__super__.select.call(this, this.RPath);
      g.tool.onMouseMove = function(event) {
        event = g.snap(event);
        g.selectedTool.move(event);
      };
    };

    PathTool.prototype.deselect = function() {
      PathTool.__super__.deselect.call(this);
      this.finishPath();
      g.tool.onMouseMove = null;
    };

    PathTool.prototype.begin = function(event, from, data) {
      var _ref;
      if (from == null) {
        from = g.me;
      }
      if (data == null) {
        data = null;
      }
      if (!((g.currentPaths[from] != null) && ((_ref = g.currentPaths[from].data) != null ? _ref.polygonMode : void 0))) {
        g.deselectAll();
        g.currentPaths[from] = new this.RPath(null, data);
      }
      g.currentPaths[from].createBegin(event.point, event, false);
      if ((g.me != null) && from === g.me) {
        g.chatSocket.emit("begin", g.me, g.eventObj(event), this.name, g.currentPaths[from].data);
      }
    };

    PathTool.prototype.update = function(event, from) {
      if (from == null) {
        from = g.me;
      }
      g.currentPaths[from].createUpdate(event.point, event, false);
      if ((g.me != null) && from === g.me) {
        g.chatSocket.emit("update", g.me, g.eventObj(event), this.name);
      }
    };

    PathTool.prototype.move = function(event) {
      var _base, _ref, _ref1;
      if ((_ref = g.currentPaths[g.me]) != null ? (_ref1 = _ref.data) != null ? _ref1.polygonMode : void 0 : void 0) {
        if (typeof (_base = g.currentPaths[g.me]).createMove === "function") {
          _base.createMove(event);
        }
      }
    };

    PathTool.prototype.end = function(event, from) {
      var _ref;
      if (from == null) {
        from = g.me;
      }
      g.currentPaths[from].createEnd(event.point, event, false);
      if (!((_ref = g.currentPaths[from].data) != null ? _ref.polygonMode : void 0)) {
        if ((g.me != null) && from === g.me) {
          g.currentPaths[from].select(false);
          g.currentPaths[from].save();
          g.chatSocket.emit("end", g.me, g.eventObj(event), this.name);
        }
        delete g.currentPaths[from];
      }
    };

    PathTool.prototype.finishPath = function(from) {
      var _ref, _ref1;
      if (from == null) {
        from = g.me;
      }
      if (!((_ref = g.currentPaths[g.me]) != null ? (_ref1 = _ref.data) != null ? _ref1.polygonMode : void 0 : void 0)) {
        return;
      }
      g.currentPaths[from].finishPath();
      if ((g.me != null) && from === g.me) {
        g.currentPaths[from].select(false);
        g.currentPaths[from].save();
        g.chatSocket.emit("bounce", {
          tool: this.name,
          "function": "finishPath",
          "arguments": g.me
        });
      }
      delete g.currentPaths[from];
    };

    return PathTool;

  })(RTool);

  this.PathTool = PathTool;

  DivTool = (function(_super) {
    __extends(DivTool, _super);

    function DivTool(name, RDiv) {
      this.name = name;
      this.RDiv = RDiv;
      DivTool.__super__.constructor.call(this, this.name, {
        x: 24,
        y: 0
      }, "crosshair");
    }

    DivTool.prototype.select = function() {
      return DivTool.__super__.select.call(this, this.RDiv);
    };

    DivTool.prototype.begin = function(event, from) {
      var point;
      if (from == null) {
        from = g.me;
      }
      point = event.point;
      g.currentPaths[from] = new Path.Rectangle(point, point);
      g.currentPaths[from].name = 'div tool rectangle';
      g.currentPaths[from].dashArray = [4, 10];
      g.currentPaths[from].strokeColor = 'black';
      if ((g.me != null) && from === g.me) {
        return g.chatSocket.emit("begin", g.me, g.eventObj(event), this.name, g.currentPaths[from].data);
      }
    };

    DivTool.prototype.update = function(event, from) {
      var point;
      if (from == null) {
        from = g.me;
      }
      point = event.point;
      g.currentPaths[from].segments[2].point = point;
      g.currentPaths[from].segments[1].point.x = point.x;
      g.currentPaths[from].segments[3].point.y = point.y;
      if ((g.me != null) && from === g.me) {
        return g.chatSocket.emit("update", g.me, point, this.name);
      }
    };

    DivTool.prototype.end = function(event, from) {
      var point;
      if (from == null) {
        from = g.me;
      }
      if (from !== g.me) {
        g.currentPaths[from].remove();
        delete g.currentPaths[from];
        return false;
      }
      point = event.point;
      g.currentPaths[from].segments[2].point = point;
      g.currentPaths[from].segments[1].point.x = point.x;
      g.currentPaths[from].segments[3].point.y = point.y;
      g.currentPaths[from].remove();
      if (RDiv.boxOverlapsTwoPlanets(g.currentPaths[from].bounds)) {
        return false;
      }
      if (RLock.intersectRect(g.currentPaths[from].bounds)) {
        return false;
      }
      if (g.currentPaths[from].bounds.area < 100) {
        g.currentPaths[from].width = 10;
        g.currentPaths[from].height = 10;
      }
      if ((g.me != null) && from === g.me) {
        g.chatSocket.emit("end", g.me, point, this.name);
      }
      return true;
    };

    return DivTool;

  })(RTool);

  this.DivTool = DivTool;

  LockTool = (function(_super) {
    __extends(LockTool, _super);

    function LockTool() {
      LockTool.__super__.constructor.call(this, "Lock", RLock);
      this.textItem = null;
    }

    LockTool.prototype.update = function(event, from) {
      var cost, point, _ref;
      if (from == null) {
        from = g.me;
      }
      point = event.point;
      cost = g.currentPaths[from].bounds.area / 1000.0;
      if ((_ref = this.textItem) != null) {
        _ref.remove();
      }
      this.textItem = new PointText(point);
      this.textItem.justification = 'right';
      this.textItem.fillColor = 'black';
      this.textItem.content = '' + cost + ' romanescoins';
      return LockTool.__super__.update.call(this, event, from);
    };

    LockTool.prototype.end = function(event, from) {
      var _ref;
      if (from == null) {
        from = g.me;
      }
      if ((_ref = this.textItem) != null) {
        _ref.remove();
      }
      if (LockTool.__super__.end.call(this, event, from)) {
        RLock.initModal(g.currentPaths[from].bounds);
        return delete g.currentPaths[from];
      }
    };

    return LockTool;

  })(DivTool);

  this.LockTool = LockTool;

  TextTool = (function(_super) {
    __extends(TextTool, _super);

    function TextTool() {
      TextTool.__super__.constructor.call(this, "Text", RText);
    }

    TextTool.prototype.end = function(event, from) {
      if (from == null) {
        from = g.me;
      }
      if (TextTool.__super__.end.call(this, event, from)) {
        RText.save(g.currentPaths[from].bounds, "text");
        return delete g.currentPaths[from];
      }
    };

    return TextTool;

  })(DivTool);

  this.TextTool = TextTool;

  MediaTool = (function(_super) {
    __extends(MediaTool, _super);

    function MediaTool() {
      MediaTool.__super__.constructor.call(this, "Media", RMedia);
    }

    MediaTool.prototype.end = function(event, from) {
      if (from == null) {
        from = g.me;
      }
      if (MediaTool.__super__.end.call(this, event, from)) {
        RMedia.initModal(g.currentPaths[from].bounds);
        return delete g.currentPaths[from];
      }
    };

    return MediaTool;

  })(DivTool);

  this.MediaTool = MediaTool;

  ScreenshotTool = (function(_super) {
    __extends(ScreenshotTool, _super);

    function ScreenshotTool() {
      this.copyURL = __bind(this.copyURL, this);
      this.downloadSVG = __bind(this.downloadSVG, this);
      this.downloadPNG = __bind(this.downloadPNG, this);
      this.publishOnPinterest_callback = __bind(this.publishOnPinterest_callback, this);
      this.publishOnPinterest = __bind(this.publishOnPinterest, this);
      this.publishOnFacebookAsPhoto_callback = __bind(this.publishOnFacebookAsPhoto_callback, this);
      this.publishOnFacebookAsPhoto = __bind(this.publishOnFacebookAsPhoto, this);
      this.publishOnFacebook_callback = __bind(this.publishOnFacebook_callback, this);
      this.publishOnFacebook = __bind(this.publishOnFacebook, this);
      this.extractImage = __bind(this.extractImage, this);
      ScreenshotTool.__super__.constructor.call(this, 'Screenshot', {
        x: 24,
        y: 0
      }, "crosshair");
      this.modalJ = $("#screenshotModal");
      this.modalJ.find('button[name="publish-on-facebook"]').click((function(_this) {
        return function() {
          return _this.publishOnFacebook();
        };
      })(this));
      this.modalJ.find('button[name="publish-on-facebook-photo"]').click((function(_this) {
        return function() {
          return _this.publishOnFacebookAsPhoto();
        };
      })(this));
      this.modalJ.find('button[name="download-png"]').click((function(_this) {
        return function() {
          return _this.downloadPNG();
        };
      })(this));
      this.modalJ.find('button[name="download-svg"]').click((function(_this) {
        return function() {
          return _this.downloadSVG();
        };
      })(this));
      this.modalJ.find('button[name="publish-on-pinterest"]').click((function(_this) {
        return function() {
          return _this.publishOnPinterest();
        };
      })(this));
      this.descriptionJ = this.modalJ.find('input[name="message"]');
      this.descriptionJ.change((function(_this) {
        return function() {
          _this.modalJ.find('a[name="publish-on-twitter"]').attr("data-text", _this.getDescription());
        };
      })(this));
      ZeroClipboard.config({
        swfPath: "http://127.0.0.1:8000/static/libs/ZeroClipboard/ZeroClipboard.swf"
      });
    }

    ScreenshotTool.prototype.getDescription = function() {
      if (this.descriptionJ.val().length > 0) {
        return this.descriptionJ.val();
      } else {
        return "Artwork made in Romanesco";
      }
    };

    ScreenshotTool.prototype.begin = function(event, from) {
      if (from == null) {
        from = g.me;
      }
      if (from !== g.me) {
        return;
      }
      g.currentPaths[from] = new Path.Rectangle(event.point, event.point);
      g.currentPaths[from].name = 'screenshot tool selection rectangle';
      g.currentPaths[from].dashArray = [4, 10];
      g.currentPaths[from].strokeColor = 'black';
      return g.currentPaths[from].strokeWidth = 1;
    };

    ScreenshotTool.prototype.update = function(event, from) {
      if (from == null) {
        from = g.me;
      }
      if (from !== g.me) {
        return;
      }
      g.currentPaths[from].lastSegment.point = event.point;
      g.currentPaths[from].lastSegment.next.point.y = event.point.y;
      return g.currentPaths[from].lastSegment.previous.point.x = event.point.x;
    };

    ScreenshotTool.prototype.end = function(event, from) {
      var r;
      if (from == null) {
        from = g.me;
      }
      if (from !== g.me) {
        return;
      }
      g.currentPaths[from].remove();
      delete g.currentPaths[from];
      g.view.draw();
      r = new Rectangle(event.downPoint, event.point);
      if (r.area < 100) {
        return;
      }
      this.div = new RSelectionRectangle(new Rectangle(event.downPoint, event.point), this.extractImage);
    };

    ScreenshotTool.prototype.extractImage = function() {
      var canvasTemp, contextTemp, copyDataBtnJ, imgJ, maxHeight, twitterLinkJ, twitterScriptJ, viewRectangle;
      this.rectangle = this.div.getBounds();
      viewRectangle = g.projectToViewRectangle(this.rectangle);
      this.div.remove();
      canvasTemp = document.createElement('canvas');
      canvasTemp.width = viewRectangle.width;
      canvasTemp.height = viewRectangle.height;
      contextTemp = canvasTemp.getContext('2d');
      contextTemp.putImageData(g.context.getImageData(viewRectangle.x, viewRectangle.y, viewRectangle.width, viewRectangle.height), 0, 0);
      this.dataURL = canvasTemp.toDataURL("image/png");
      copyDataBtnJ = this.modalJ.find('button[name="copy-data-url"]');
      copyDataBtnJ.attr("data-clipboard-text", this.dataURL);
      imgJ = this.modalJ.find("img.png");
      imgJ.attr("src", this.dataURL);
      maxHeight = g.windowJ.height - 220;
      imgJ.css({
        'max-height': maxHeight + "px"
      });
      twitterLinkJ = this.modalJ.find('a[name="publish-on-twitter"]');
      twitterLinkJ.empty().text("Publish on Twitter");
      twitterLinkJ.attr("data-url", "http://romanesc.co/" + location.hash);
      twitterScriptJ = $('<script type="text/javascript">window.twttr=(function(d,s,id){var t,js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id)){return}js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);return window.twttr||(t={_e:[],ready:function(f){t._e.push(f)}})}(document,"script","twitter-wjs"));</script>');
      twitterLinkJ.append(twitterScriptJ);
      this.modalJ.find("a.png").attr("href", this.dataURL);
      this.modalJ.modal('show');
      this.modalJ.on('shown.bs.modal', (function(_this) {
        return function(e) {
          var client;
          client = new ZeroClipboard(copyDataBtnJ);
          client.on("ready", function(readyEvent) {
            console.log("ZeroClipboard SWF is ready!");
            client.on("aftercopy", function(event) {
              romanesco_alert("Image data url was successfully copied into the clipboard!", "success");
              this.destroy();
            });
          });
        };
      })(this));
    };

    ScreenshotTool.prototype.saveImage = function(callback) {
      Dajaxice.draw.saveImage(callback, {
        'image': this.dataURL
      });
      romanesco_alert("Your image is being uploaded...", "info");
    };

    ScreenshotTool.prototype.publishOnFacebook = function() {
      this.saveImage(this.publishOnFacebook_callback);
    };

    ScreenshotTool.prototype.publishOnFacebook_callback = function(result) {
      var caption;
      romanesco_alert("Your image was successfully uploaded to Romanesco, posting to Facebook...", "info");
      caption = this.getDescription();
      return FB.ui({
        method: "feed",
        name: "Romanesco",
        caption: caption,
        description: "Romanesco is an infinite collaborative drawing app.",
        link: "http://61b2fd1e.ngrok.com/",
        picture: "http://61b2fd1e.ngrok.com/" + result.url
      }, function(response) {
        if (response && response.post_id) {
          romanesco_alert("Your Post was successfully published!", "success");
        } else {
          romanesco_alert("An error occured. Your post was not published.", "error");
        }
      });
    };

    ScreenshotTool.prototype.publishOnFacebookAsPhoto = function() {
      if (!g.loggedIntoFacebook) {
        FB.login((function(_this) {
          return function(response) {
            if (response && !response.error) {
              _this.saveImage(_this.publishOnFacebookAsPhoto_callback);
            } else {
              romanesco_alert("An error occured when trying to log you into facebook.", "error");
            }
          };
        })(this));
      } else {
        this.saveImage(this.publishOnFacebookAsPhoto_callback);
      }
    };

    ScreenshotTool.prototype.publishOnFacebookAsPhoto_callback = function(result) {
      var caption;
      romanesco_alert("Your image was successfully uploaded to Romanesco, posting to Facebook...", "info");
      caption = this.getDescription();
      FB.api("/me/photos", "POST", {
        "url": "http://61b2fd1e.ngrok.com/" + result.url,
        "message": caption
      }, function(response) {
        if (response && !response.error) {
          romanesco_alert("Your Post was successfully published!", "success");
        } else {
          romanesco_alert("An error occured. Your post was not published.", "error");
          console.log(response.error);
        }
      });
    };

    ScreenshotTool.prototype.publishOnPinterest = function() {
      this.saveImage(this.publishOnPinterest_callback);
    };

    ScreenshotTool.prototype.publishOnPinterest_callback = function(result) {
      var buttonJ, caption, description, imageUrl, imgJ, linkJ, linkJcopy, pinterestModalJ, siteUrl, submit;
      romanesco_alert("Your image was successfully uploaded to Romanesco...", "info");
      pinterestModalJ = $("#customModal");
      pinterestModalJ.modal('show');
      pinterestModalJ.addClass("pinterest-modal");
      pinterestModalJ.find(".modal-title").text("Publish on Pinterest");
      siteUrl = encodeURI('http://61b2fd1e.ngrok.com/');
      imageUrl = siteUrl + result.url;
      caption = this.getDescription();
      description = encodeURI(caption);
      linkJ = $("<a>");
      linkJ.addClass("image");
      linkJ.attr("href", "http://pinterest.com/pin/create/button/?url=" + siteUrl + "&media=" + imageUrl + "&description=" + description);
      linkJcopy = linkJ.clone();
      imgJ = $('<img>');
      imgJ.attr('src', siteUrl + result.url);
      linkJ.append(imgJ);
      buttonJ = pinterestModalJ.find('button[name="submit"]');
      linkJcopy.addClass("btn btn-primary").text("Pin it!").insertBefore(buttonJ);
      buttonJ.hide();
      submit = function() {
        pinterestModalJ.modal('hide');
      };
      linkJ.click(submit);
      pinterestModalJ.find(".modal-body").empty().append(linkJ);
      pinterestModalJ.on('hide.bs.modal', function(event) {
        pinterestModalJ.removeClass("pinterest-modal");
        linkJcopy.remove();
        pinterestModalJ.off('hide.bs.modal');
      });
    };

    ScreenshotTool.prototype.downloadPNG = function() {
      this.modalJ.find("a.png")[0].click();
      this.modalJ.modal('hide');
    };

    ScreenshotTool.prototype.downloadSVG = function() {
      var blob, bounds, canvasTemp, fileName, item, itemsToSave, link, position, rectanglePath, svg, svgGroup, tempProject, url, _i, _j, _len, _len1, _ref, _ref1;
      rectanglePath = new Path.Rectangle(this.rectangle);
      itemsToSave = [];
      _ref = project.activeLayer.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        bounds = item.bounds;
        if ((item.controller != null) && (this.rectangle.contains(bounds) || (this.rectangle.intersects(bounds) && ((_ref1 = item.controller.controlPath) != null ? _ref1.getIntersections(rectanglePath).length : void 0) > 0))) {
          g.pushIfAbsent(itemsToSave, item.controller);
        }
      }
      svgGroup = new Group();
      for (_j = 0, _len1 = itemsToSave.length; _j < _len1; _j++) {
        item = itemsToSave[_j];
        svgGroup.addChild(item.drawing.clone());
      }
      rectanglePath.remove();
      position = svgGroup.position.subtract(this.rectangle.topLeft);
      fileName = "image.svg";
      canvasTemp = document.createElement('canvas');
      canvasTemp.width = this.rectangle.width;
      canvasTemp.height = this.rectangle.height;
      tempProject = new Project(canvasTemp);
      svgGroup.position = position;
      tempProject.addChild(svgGroup);
      svg = tempProject.exportSVG({
        asString: true
      });
      tempProject.remove();
      paper.projects.first().activate();
      blob = new Blob([svg], {
        type: 'image/svg+xml'
      });
      url = URL.createObjectURL(blob);
      link = document.createElement("a");
      link.download = fileName;
      link.href = url;
      link.click();
      this.modalJ.modal('hide');
    };

    ScreenshotTool.prototype.copyURL = function() {};

    return ScreenshotTool;

  })(RTool);

  this.ScreenshotTool = ScreenshotTool;

}).call(this);

//# sourceMappingURL=tools.map
