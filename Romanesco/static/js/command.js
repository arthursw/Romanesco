// Generated by CoffeeScript 1.7.1
(function() {
  var AddPointCommand, ChangeParameterCommand, ChangeSelectedPointCommand, ChangeSelectedPointTypeCommand, ChangeSpeedCommand, Command, CommandManager, CreateDivCommand, CreatePathCommand, DeleteDivCommand, DeletePathCommand, DeletePointCommand, MoveCommand, ResizeDivCommand, RotationCommand, ScaleCommand, SelectCommand,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Command = (function() {
    function Command(name, execute) {
      this.name = name;
      this.execute = execute != null ? execute : true;
      this.click = __bind(this.click, this);
      this.liJ = $("<li>").text(this.name);
      this.liJ.click(this.click);
      this.done = !this.execute;
      if (this.done) {
        this.liJ.addClass('done');
      }
      return;
    }

    Command.prototype["do"] = function() {
      this.done = true;
      this.liJ.addClass('done');
    };

    Command.prototype.undo = function() {
      this.done = false;
      this.liJ.removeClass('done');
    };

    Command.prototype.click = function() {
      g.commandManager.commandClicked(this);
    };

    Command.prototype.toggle = function() {
      if (this.done) {
        return this.undo();
      } else {
        return this["do"]();
      }
    };

    Command.prototype["delete"] = function() {
      this.liJ.remove();
    };

    return Command;

  })();

  this.Command = Command;

  MoveCommand = (function(_super) {
    __extends(MoveCommand, _super);

    function MoveCommand(item, newPosition, previousPosition, execute) {
      this.item = item;
      this.newPosition = newPosition;
      this.previousPosition = previousPosition != null ? previousPosition : null;
      if (execute == null) {
        execute = true;
      }
      MoveCommand.__super__.constructor.call(this, "Move item", execute);
      if (this.previousPosition == null) {
        this.previousPosition = this.item.getPosition();
      }
      return;
    }

    MoveCommand.prototype["do"] = function() {
      this.item.moveTo(this.newPosition, true);
      MoveCommand.__super__["do"].call(this);
    };

    MoveCommand.prototype.undo = function() {
      this.item.moveTo(this.previousPosition, true);
      MoveCommand.__super__.undo.call(this);
    };

    MoveCommand.prototype.update = function() {
      this.newPosition = this.item.getPosition();
    };

    return MoveCommand;

  })(Command);

  this.MoveCommand = MoveCommand;

  SelectCommand = (function(_super) {
    __extends(SelectCommand, _super);

    function SelectCommand(items, updateParameters) {
      this.items = items;
      this.updateParameters = updateParameters;
      SelectCommand.__super__.constructor.call(this, "Select item");
      this.previouslySelectedItems = g.previouslySelectedItems;
      return;
    }

    SelectCommand.prototype["do"] = function() {
      var item, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.previouslySelectedItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.deselect();
      }
      _ref1 = this.items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.select(this.updateParameters);
      }
      SelectCommand.__super__["do"].call(this);
    };

    SelectCommand.prototype.undo = function() {
      var item, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.deselect();
      }
      _ref1 = this.previouslySelectedItems;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.select();
      }
      SelectCommand.__super__.undo.call(this);
    };

    return SelectCommand;

  })(Command);

  this.SelectCommand = SelectCommand;

  ChangeParameterCommand = (function(_super) {
    __extends(ChangeParameterCommand, _super);

    function ChangeParameterCommand(item, parameterName) {
      this.item = item;
      this.parameterName = parameterName;
      this.previousValue = this.item.data[this.parameterName];
      console.log('previousValue');
      console.log(this.previousValue);
      ChangeParameterCommand.__super__.constructor.call(this, 'Change item parameter "' + this.parameterName + '"', false);
      return;
    }

    ChangeParameterCommand.prototype["do"] = function() {
      console.log('change ' + this.parameterName + ' , change to ' + this.value);
      console.log(this.value);
      this.item.changeParameter(this.parameterName, this.value, true, true);
      ChangeParameterCommand.__super__["do"].call(this);
    };

    ChangeParameterCommand.prototype.undo = function() {
      console.log('undo change ' + this.parameterName + ' , change to ' + this.previousValue);
      console.log(this.previousValue);
      this.item.changeParameter(this.parameterName, this.previousValue, true, true);
      ChangeParameterCommand.__super__.undo.call(this);
    };

    ChangeParameterCommand.prototype.update = function() {
      this.value = this.item.data[this.parameterName];
      console.log('value');
      console.log(this.value);
    };

    return ChangeParameterCommand;

  })(Command);

  this.ChangeParameterCommand = ChangeParameterCommand;

  CreatePathCommand = (function(_super) {
    __extends(CreatePathCommand, _super);

    function CreatePathCommand(item, name, execute) {
      this.item = item;
      if (name == null) {
        name = null;
      }
      if (execute == null) {
        execute = false;
      }
      if (name == null) {
        name = "Create path";
      }
      CreatePathCommand.__super__.constructor.call(this, name, execute);
      return;
    }

    CreatePathCommand.prototype.duplicate = function() {
      this.item = this.itemConstructor.duplicate(this.data, this.controlPathSegments);
      this.item.select();
    };

    CreatePathCommand.prototype.deletePath = function() {
      var clone;
      clone = this.item.controlPath.clone();
      this.controlPathSegments = clone.segments;
      clone.remove();
      this.data = this.item.getData();
      this.itemConstructor = this.item.constructor;
      this.item["delete"]();
      this.item = null;
    };

    CreatePathCommand.prototype["do"] = function() {
      this.duplicate();
      CreatePathCommand.__super__["do"].call(this);
    };

    CreatePathCommand.prototype.undo = function() {
      this.deletePath();
      CreatePathCommand.__super__.undo.call(this);
    };

    return CreatePathCommand;

  })(Command);

  this.CreatePathCommand = CreatePathCommand;

  DeletePathCommand = (function(_super) {
    __extends(DeletePathCommand, _super);

    function DeletePathCommand(item) {
      this.item = item;
      DeletePathCommand.__super__.constructor.call(this, this.item, 'Delete path', true);
    }

    DeletePathCommand.prototype["do"] = function() {
      this.deletePath();
      this.constructor.__super__.constructor.__super__["do"].call(this);
    };

    DeletePathCommand.prototype.undo = function() {
      this.duplicate();
      this.constructor.__super__.constructor.__super__["undo"].call(this);
    };

    return DeletePathCommand;

  })(CreatePathCommand);

  this.DeletePathCommand = DeletePathCommand;

  CreateDivCommand = (function(_super) {
    __extends(CreateDivCommand, _super);

    function CreateDivCommand(div, name, execute) {
      this.div = div;
      if (name == null) {
        name = null;
      }
      if (execute == null) {
        execute = false;
      }
      if (name == null) {
        name = "Create div";
      }
      this.update();
      CreateDivCommand.__super__.constructor.call(this, name, execute);
      return;
    }

    CreateDivCommand.prototype.duplicate = function() {
      var _base;
      if ((_base = this.divConstructor).duplicateCommand == null) {
        _base.duplicateCommand = {};
      }
      this.divConstructor.duplicateCommand[this.pk] = this;
      this.divConstructor.duplicate(this.bounds, this.object_type, this.message, this.name, this.url, this.pk, this.data);
      this.div = null;
      this.execute = false;
    };

    CreateDivCommand.prototype.deleteDiv = function() {
      if (!this.div) {
        this.execute = false;
        return;
      }
      this.update();
      this.div["delete"]();
      this.div = null;
    };

    CreateDivCommand.prototype["do"] = function() {
      this.duplicate();
      CreateDivCommand.__super__["do"].call(this);
    };

    CreateDivCommand.prototype.undo = function() {
      this.deleteDiv();
      CreateDivCommand.__super__.undo.call(this);
    };

    CreateDivCommand.prototype.update = function() {
      this.bounds = this.div.getBounds();
      this.object_type = this.div.object_type;
      this.message = this.div.message;
      this.name = this.div.name;
      this.url = this.div.url;
      this.pk = this.div.pk;
      this.data = this.div.getData();
      this.divConstructor = this.div.constructor;
    };

    CreateDivCommand.prototype.setDiv = function(div) {
      this.div = div;
      this.execute = true;
    };

    CreateDivCommand.prototype["delete"] = function() {
      delete this.divConstructor.duplicateCommand[this.pk];
      CreateDivCommand.__super__["delete"].call(this);
    };

    return CreateDivCommand;

  })(Command);

  this.CreateDivCommand = CreateDivCommand;

  DeleteDivCommand = (function(_super) {
    __extends(DeleteDivCommand, _super);

    function DeleteDivCommand(item) {
      this.item = item;
      DeleteDivCommand.__super__.constructor.call(this, this.item, 'Delete div', true);
    }

    DeleteDivCommand.prototype["do"] = function() {
      this.deleteDiv();
      this.constructor.__super__.constructor.__super__["do"].call(this);
    };

    DeleteDivCommand.prototype.undo = function() {
      this.duplicate();
      this.constructor.__super__.constructor.__super__["undo"].call(this);
    };

    return DeleteDivCommand;

  })(CreateDivCommand);

  this.DeleteDivCommand = DeleteDivCommand;

  ResizeDivCommand = (function(_super) {
    __extends(ResizeDivCommand, _super);

    function ResizeDivCommand(div) {
      this.div = div;
      this.previousPosition = this.div.position;
      this.previousSize = this.div.size;
      ResizeDivCommand.__super__.constructor.call(this, "Resize div", false);
      return;
    }

    ResizeDivCommand.prototype["do"] = function() {
      this.div.resizeTo(this.position, this.size);
      ResizeDivCommand.__super__["do"].call(this);
    };

    ResizeDivCommand.prototype.undo = function() {
      this.div.resizeTo(this.previousPosition, this.previousSize);
      ResizeDivCommand.__super__.undo.call(this);
    };

    ResizeDivCommand.prototype.update = function() {
      this.position = this.div.position;
      this.size = this.div.size;
    };

    return ResizeDivCommand;

  })(Command);

  this.ResizeDivCommand = ResizeDivCommand;

  AddPointCommand = (function(_super) {
    __extends(AddPointCommand, _super);

    function AddPointCommand(item, location, name) {
      this.item = item;
      this.location = location;
      if (name == null) {
        name = null;
      }
      AddPointCommand.__super__.constructor.call(this, name == null ? 'Add point on item' : name);
      return;
    }

    AddPointCommand.prototype.addPoint = function(update) {
      if (update == null) {
        update = true;
      }
      this.segment = this.item.addPoint(this.location, true, update);
    };

    AddPointCommand.prototype.deletePoint = function() {
      this.location = this.item.deletePoint(this.segment);
    };

    AddPointCommand.prototype["do"] = function() {
      this.addPoint();
      AddPointCommand.__super__["do"].call(this);
    };

    AddPointCommand.prototype.undo = function() {
      this.deletePoint();
      AddPointCommand.__super__.undo.call(this);
    };

    return AddPointCommand;

  })(Command);

  this.AddPointCommand = AddPointCommand;

  DeletePointCommand = (function(_super) {
    __extends(DeletePointCommand, _super);

    function DeletePointCommand(item, segment) {
      this.item = item;
      this.segment = segment;
      DeletePointCommand.__super__.constructor.call(this, this.item, this.segment, 'Delete point on item');
    }

    DeletePointCommand.prototype["do"] = function() {
      this.selectionState = {};
      this.selectionState.segment = this.item.selectionState.segment;
      this.previousPosition = new Point(this.selectionState.segment.point);
      this.previousHandleIn = new Point(this.selectionState.segment.handleIn);
      this.previousHandleOut = new Point(this.selectionState.segment.handleOut);
      this.deletePoint();
      this.constructor.__super__.constructor.__super__["do"].call(this);
    };

    DeletePointCommand.prototype.undo = function() {
      this.addPoint(false);
      this.item.selectionState.segment = this.segment;
      this.item.changeSelectedSegment(this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      this.constructor.__super__.constructor.__super__["undo"].call(this);
    };

    return DeletePointCommand;

  })(AddPointCommand);

  this.DeletePointCommand = DeletePointCommand;

  ChangeSelectedPointTypeCommand = (function(_super) {
    __extends(ChangeSelectedPointTypeCommand, _super);

    function ChangeSelectedPointTypeCommand(item, rtype) {
      this.item = item;
      this.rtype = rtype;
      this.selectionState = {};
      this.selectionState.segment = this.item.selectionState.segment;
      this.previousRType = this.selectionState.segment.rtype;
      this.previousPosition = new Point(this.selectionState.segment.point);
      this.previousHandleIn = new Point(this.selectionState.segment.handleIn);
      this.previousHandleOut = new Point(this.selectionState.segment.handleOut);
      ChangeSelectedPointTypeCommand.__super__.constructor.call(this, 'Change point type on item');
      return;
    }

    ChangeSelectedPointTypeCommand.prototype["do"] = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedPointType(this.rtype);
      ChangeSelectedPointTypeCommand.__super__["do"].call(this);
    };

    ChangeSelectedPointTypeCommand.prototype.undo = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedPointType(this.previousRType, true, false);
      this.item.changeSelectedSegment(this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      ChangeSelectedPointTypeCommand.__super__.undo.call(this);
    };

    return ChangeSelectedPointTypeCommand;

  })(Command);

  this.ChangeSelectedPointTypeCommand = ChangeSelectedPointTypeCommand;

  ChangeSelectedPointCommand = (function(_super) {
    __extends(ChangeSelectedPointCommand, _super);

    function ChangeSelectedPointCommand(item) {
      this.item = item;
      this.selectionState = {};
      this.selectionState.segment = this.item.selectionState.segment;
      this.previousPosition = new Point(this.selectionState.segment.point);
      this.previousHandleIn = new Point(this.selectionState.segment.handleIn);
      this.previousHandleOut = new Point(this.selectionState.segment.handleOut);
      ChangeSelectedPointCommand.__super__.constructor.call(this, 'Change point on item', false);
      return;
    }

    ChangeSelectedPointCommand.prototype["do"] = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedSegment(this.position, this.handleIn, this.handleOut);
      ChangeSelectedPointCommand.__super__["do"].call(this);
    };

    ChangeSelectedPointCommand.prototype.undo = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedSegment(this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      ChangeSelectedPointCommand.__super__.undo.call(this);
    };

    ChangeSelectedPointCommand.prototype.update = function() {
      this.position = new Point(this.item.selectionState.segment.point);
      this.handleIn = new Point(this.item.selectionState.segment.handleIn);
      this.handleOut = new Point(this.item.selectionState.segment.handleOut);
    };

    return ChangeSelectedPointCommand;

  })(Command);

  this.ChangeSelectedPointCommand = ChangeSelectedPointCommand;

  RotationCommand = (function(_super) {
    __extends(RotationCommand, _super);

    function RotationCommand(item) {
      this.item = item;
      this.previousRotation = this.item.rotation;
      RotationCommand.__super__.constructor.call(this, 'Rotate item', false);
      return;
    }

    RotationCommand.prototype["do"] = function() {
      this.item.select();
      this.item.setRotation(this.rotation, true);
      RotationCommand.__super__["do"].call(this);
    };

    RotationCommand.prototype.undo = function() {
      this.item.select();
      this.item.setRotation(this.previousRotation, true);
      RotationCommand.__super__.undo.call(this);
    };

    RotationCommand.prototype.update = function() {
      this.rotation = this.item.rotation;
    };

    return RotationCommand;

  })(Command);

  this.RotationCommand = RotationCommand;

  ScaleCommand = (function(_super) {
    __extends(ScaleCommand, _super);

    function ScaleCommand(item) {
      this.item = item;
      this.previousRectangle = this.item.rectangle;
      ScaleCommand.__super__.constructor.call(this, 'Scale item', false);
      return;
    }

    ScaleCommand.prototype["do"] = function() {
      this.item.select();
      this.item.setRectangle(this.rectangle, true);
      ScaleCommand.__super__["do"].call(this);
    };

    ScaleCommand.prototype.undo = function() {
      this.item.select();
      this.item.setRectangle(this.previousRectangle, true);
      ScaleCommand.__super__.undo.call(this);
    };

    ScaleCommand.prototype.update = function() {
      this.rectangle = this.item.rectangle;
    };

    return ScaleCommand;

  })(Command);

  this.ScaleCommand = ScaleCommand;

  ChangeSpeedCommand = (function(_super) {
    __extends(ChangeSpeedCommand, _super);

    function ChangeSpeedCommand(item) {
      this.item = item;
      this.previousSpeeds = this.item.speeds.slice();
      ChangeSpeedCommand.__super__.constructor.call(this, 'Change speed', false);
      return;
    }

    ChangeSpeedCommand.prototype["do"] = function() {
      this.item.speeds = this.speeds;
      this.item.updateSpeed();
      this.item.draw();
      ChangeSpeedCommand.__super__["do"].call(this);
    };

    ChangeSpeedCommand.prototype.undo = function() {
      this.speeds = this.item.speeds.slice();
      this.item.speeds = this.previousSpeeds;
      this.item.updateSpeed();
      this.item.draw();
      ChangeSpeedCommand.__super__.undo.call(this);
    };

    ChangeSpeedCommand.prototype.update = function() {};

    return ChangeSpeedCommand;

  })(Command);

  this.ChangeSpeedCommand = ChangeSpeedCommand;

  CommandManager = (function() {
    CommandManager.maxCommandNumber = 20;

    function CommandManager() {
      this.history = [];
      this.currentCommand = -1;
      this.historyJ = $("#History ul.history");
      return;
    }

    CommandManager.prototype.add = function(command) {
      var currentLiJ, firstCommand, _ref;
      if (this.currentCommand >= this.constructor.maxCommandNumber - 1) {
        firstCommand = this.history.shift();
        firstCommand["delete"]();
        this.currentCommand--;
      }
      currentLiJ = (_ref = this.history[this.currentCommand]) != null ? _ref.liJ : void 0;
      if (currentLiJ != null) {
        currentLiJ.nextAll().remove();
      }
      this.historyJ.append(command.liJ);
      $("#History .mCustomScrollbar").mCustomScrollbar("scrollTo", "bottom");
      this.currentCommand++;
      this.history.splice(this.currentCommand, this.history.length - this.currentCommand, command);
      if (command.execute) {
        command["do"]();
      } else {
        command.execute = true;
      }
    };

    CommandManager.prototype.commandClicked = function(command) {
      var commandIndex, direction, offset;
      commandIndex = this.getCommandIndex(command);
      if (this.currentCommand === commandIndex) {
        return;
      }
      if (this.currentCommand > commandIndex) {
        direction = -1;
        offset = 0;
      } else {
        direction = 1;
        offset = 1;
      }
      while (this.currentCommand !== commandIndex) {
        if (!this.history[this.currentCommand + offset].execute) {
          g.romanesco_alert("This action is not feasible yet (server has not responded yet, please wait a few seconds for a response).", "warning");
          break;
        } else {
          this.history[this.currentCommand + offset].toggle();
        }
        this.currentCommand += direction;
      }
    };

    CommandManager.prototype.getCommandIndex = function(command) {
      var c, i, _i, _len, _ref;
      _ref = this.history;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c === command) {
          return i;
        }
      }
      return -1;
    };

    CommandManager.prototype.getCurrentCommand = function() {
      return this.history[this.currentCommand];
    };

    return CommandManager;

  })();

  this.CommandManager = CommandManager;

}).call(this);

//# sourceMappingURL=command.map
