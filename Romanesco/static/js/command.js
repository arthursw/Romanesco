// Generated by CoffeeScript 1.7.1
(function() {
  var AddPointCommand, ChangeParameterCommand, ChangeSelectedPointTypeCommand, Command, CommandManager, CreateDivCommand, CreateItemCommand, CreateLockCommand, CreatePathCommand, DeleteDivCommand, DeleteLockCommand, DeletePathCommand, DeletePointCommand, ModifyPointCommand, ModifySpeedCommand, MoveCommand, MoveViewCommand, ResizeCommand, RotationCommand, SelectCommand,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Command = (function() {
    function Command(name) {
      this.name = name;
      this.click = __bind(this.click, this);
      this.liJ = $("<li>").text(this.name);
      this.liJ.click(this.click);
      return;
    }

    Command.prototype.superDo = function() {
      this.done = true;
      this.liJ.addClass('done');
    };

    Command.prototype.superUndo = function() {
      this.done = false;
      this.liJ.removeClass('done');
    };

    Command.prototype["do"] = function() {
      this.superDo();
    };

    Command.prototype.undo = function() {
      this.superUndo();
    };

    Command.prototype.click = function() {
      g.commandManager.commandClicked(this);
    };

    Command.prototype.toggle = function() {
      if (this.done) {
        return this.undo();
      } else {
        return this["do"]();
      }
    };

    Command.prototype["delete"] = function() {
      this.liJ.remove();
    };

    Command.prototype.update = function() {};

    Command.prototype.end = function() {
      this.superDo();
    };

    return Command;

  })();

  this.Command = Command;

  ResizeCommand = (function(_super) {
    __extends(ResizeCommand, _super);

    function ResizeCommand(item, newRectangle) {
      this.item = item;
      this.newRectangle = newRectangle;
      ResizeCommand.__super__.constructor.call(this, "Resize item", item);
      this.previousRectangle = this.item.rectangle;
      return;
    }

    ResizeCommand.prototype["do"] = function() {
      this.item.setRectangle(this.newRectangle, true);
      ResizeCommand.__super__["do"].call(this);
    };

    ResizeCommand.prototype.undo = function() {
      this.item.setRectangle(this.previousRectangle, true);
      ResizeCommand.__super__.undo.call(this);
    };

    ResizeCommand.prototype.update = function(event) {
      this.item.updateSetRectangle(event);
    };

    ResizeCommand.prototype.end = function(valid) {
      this.newRectangle = this.item.rectangle;
      if (this.newRectangle === this.previousRectangle) {
        return false;
      }
      if (!valid) {
        return false;
      }
      this.item.endSetRectangle();
      ResizeCommand.__super__.end.call(this);
      return true;
    };

    return ResizeCommand;

  })(Command);

  this.ResizeCommand = ResizeCommand;

  RotationCommand = (function(_super) {
    __extends(RotationCommand, _super);

    function RotationCommand(item, newRotation) {
      this.item = item;
      this.newRotation = newRotation;
      RotationCommand.__super__.constructor.call(this, "Rotate item");
      this.previousRotation = this.item.rotation;
      return;
    }

    RotationCommand.prototype["do"] = function() {
      this.item.setRotation(this.newRotation, true);
      RotationCommand.__super__["do"].call(this);
    };

    RotationCommand.prototype.undo = function() {
      this.item.setRotation(this.previousRotation, true);
      RotationCommand.__super__.undo.call(this);
    };

    RotationCommand.prototype.update = function(event) {
      this.item.updateSetRotation(event);
    };

    RotationCommand.prototype.end = function(valid) {
      this.newRotation = this.item.rotation;
      if (this.newRotation === this.previousRotation) {
        return false;
      }
      if (!valid) {
        return false;
      }
      this.item.endSetRotation();
      RotationCommand.__super__.end.call(this);
      return true;
    };

    return RotationCommand;

  })(Command);

  this.RotationCommand = RotationCommand;

  MoveCommand = (function(_super) {
    __extends(MoveCommand, _super);

    function MoveCommand(item, newPosition) {
      this.item = item;
      this.newPosition = newPosition;
      MoveCommand.__super__.constructor.call(this, "Move item");
      this.previousPosition = this.item.rectangle.center;
      this.items = g.selectedItems.slice();
      g.rasterizer.rasterize(this.items, true);
      return;
    }

    MoveCommand.prototype["do"] = function() {
      var item, _i, _len, _ref;
      g.rasterizer.rasterize(this.items, false);
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.moveBy(this.newPosition.subtract(this.previousPosition), true);
      }
      g.rasterizer.rasterize(this.items);
      MoveCommand.__super__["do"].call(this);
    };

    MoveCommand.prototype.undo = function() {
      var item, _i, _len, _ref;
      g.rasterizer.rasterize(this.items, false);
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.moveBy(this.previousPosition.subtract(this.newPosition), true);
      }
      g.rasterizer.rasterize(this.items);
      MoveCommand.__super__.undo.call(this);
    };

    MoveCommand.prototype.update = function(event) {
      var item, _i, _len, _ref;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.updateMoveBy(event);
      }
    };

    MoveCommand.prototype.end = function(valid) {
      var args, item, _i, _len, _ref;
      this.newPosition = this.item.rectangle.center;
      if (this.newPosition.equals(this.previousPosition)) {
        return false;
      }
      if (!valid) {
        return false;
      }
      args = [];
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (RLock.prototype.isPrototypeOf(item)) {
          item.update('position');
        } else {
          args.push({
            "function": item.getUpdateFunction(),
            "arguments": item.getUpdateArguments('position')
          });
        }
      }
      Dajaxice.draw.multipleCalls(this.updateCallback, {
        functionsAndArguments: args
      });
      g.rasterizer.rasterize(this.items);
      MoveCommand.__super__.end.call(this);
      return true;
    };

    MoveCommand.prototype.updateCallback = function(results) {
      var result, _i, _len;
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        g.checkError(result);
      }
    };

    return MoveCommand;

  })(Command);

  this.MoveCommand = MoveCommand;

  ModifyPointCommand = (function(_super) {
    __extends(ModifyPointCommand, _super);

    function ModifyPointCommand(item) {
      this.item = item;
      this.segment = this.item.selectionState.segment;
      this.previousPosition = new Point(this.segment.point);
      this.previousHandleIn = new Point(this.segment.handleIn);
      this.previousHandleOut = new Point(this.segment.handleOut);
      ModifyPointCommand.__super__.constructor.call(this, 'Modify point');
      return;
    }

    ModifyPointCommand.prototype["do"] = function() {
      this.item.modifySegment(this.segment, this.position, this.handleIn, this.handleOut);
      ModifyPointCommand.__super__["do"].call(this);
    };

    ModifyPointCommand.prototype.undo = function() {
      this.item.modifySegment(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      ModifyPointCommand.__super__.undo.call(this);
    };

    ModifyPointCommand.prototype.update = function(event) {
      this.item.updateModifySegment(event);
    };

    ModifyPointCommand.prototype.end = function(valid) {
      this.position = new Point(this.segment.point);
      this.handleIn = new Point(this.segment.handleIn);
      this.handleOut = new Point(this.segment.handleOut);
      if (!valid) {
        return;
      }
      if (this.position.equals(this.previousPosition) && this.previousHandleIn.equals(this.handleIn) && this.previousHandleOut.equals(this.handleOut)) {
        return false;
      }
      this.item.endModifySegment();
      ModifyPointCommand.__super__.end.call(this);
      return true;
    };

    return ModifyPointCommand;

  })(Command);

  this.ModifyPointCommand = ModifyPointCommand;

  ModifySpeedCommand = (function(_super) {
    __extends(ModifySpeedCommand, _super);

    function ModifySpeedCommand(item) {
      this.item = item;
      this.previousSpeeds = this.item.speeds.slice();
      ModifySpeedCommand.__super__.constructor.call(this, 'Change speed');
      return;
    }

    ModifySpeedCommand.prototype["do"] = function() {
      this.item.speeds = this.speeds;
      this.item.updateSpeed();
      this.item.draw();
      ModifySpeedCommand.__super__["do"].call(this);
    };

    ModifySpeedCommand.prototype.undo = function() {
      this.speeds = this.item.speeds.slice();
      this.item.speeds = this.previousSpeeds;
      this.item.updateSpeed();
      this.item.draw();
      ModifySpeedCommand.__super__.undo.call(this);
    };

    ModifySpeedCommand.prototype.update = function(event) {
      this.item.updateModifySpeed(event);
    };

    ModifySpeedCommand.prototype.end = function(valid) {
      if (!valid) {
        return;
      }
      this.item.endModifySpeed();
      ModifySpeedCommand.__super__.end.call(this);
      return true;
    };

    return ModifySpeedCommand;

  })(Command);

  this.ModifySpeedCommand = ModifySpeedCommand;

  ChangeParameterCommand = (function(_super) {
    __extends(ChangeParameterCommand, _super);

    function ChangeParameterCommand(item, args) {
      this.item = item;
      this.parameterName = args[0];
      this.previousValue = this.item.data[this.parameterName];
      ChangeParameterCommand.__super__.constructor.call(this, 'Change item parameter "' + this.parameterName + '"');
      return;
    }

    ChangeParameterCommand.prototype["do"] = function() {
      this.item.changeParameter(this.parameterName, this.value, true, true);
      ChangeParameterCommand.__super__["do"].call(this);
    };

    ChangeParameterCommand.prototype.undo = function() {
      this.item.changeParameter(this.parameterName, this.previousValue, true, true);
      ChangeParameterCommand.__super__.undo.call(this);
    };

    ChangeParameterCommand.prototype.update = function(name, value) {
      this.item.changeParameter(name, value);
    };

    ChangeParameterCommand.prototype.end = function(valid) {
      this.value = this.item.data[this.parameterName];
      if (this.value === this.previousValue) {
        return false;
      }
      if (!valid) {
        return;
      }
      this.item.update(this.parameterName);
      ChangeParameterCommand.__super__.end.call(this);
      return true;
    };

    return ChangeParameterCommand;

  })(Command);

  this.ChangeParameterCommand = ChangeParameterCommand;

  MoveViewCommand = (function(_super) {
    __extends(MoveViewCommand, _super);

    function MoveViewCommand(previousPosition, newPosition) {
      this.previousPosition = previousPosition;
      this.newPosition = newPosition;
      this.updateCommandItems = __bind(this.updateCommandItems, this);
      MoveViewCommand.__super__.constructor.call(this, "Move view");
      this.superDo();
      return;
    }

    MoveViewCommand.prototype.updateCommandItems = function() {
      var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
      console.log("updateCommandItems");
      document.removeEventListener('command executed', this.updateCommandItems);
      _ref = g.commandManager.history;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        if (command.item != null) {
          if ((command.item.group == null) && g.items[command.item.pk || command.item.id]) {
            command.item = g.items[command.item.pk || command.item.id];
          }
        }
        if (command.items != null) {
          _ref1 = command.items;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            item = _ref1[i];
            if ((item.group == null) && g.items[item.pk || item.id]) {
              command.items[i] = g.items[item.pk || item.id];
            }
          }
        }
      }
    };

    MoveViewCommand.prototype["do"] = function() {
      var somethingToLoad;
      somethingToLoad = g.RMoveBy(this.newPosition.subtract(this.previousPosition), false);
      if (somethingToLoad) {
        document.addEventListener('command executed', this.updateCommandItems);
      }
      MoveViewCommand.__super__["do"].call(this);
      return somethingToLoad;
    };

    MoveViewCommand.prototype.undo = function() {
      var somethingToLoad;
      somethingToLoad = g.RMoveBy(this.previousPosition.subtract(this.newPosition), false);
      if (somethingToLoad) {
        document.addEventListener('command executed', this.updateCommandItems);
      }
      MoveViewCommand.__super__.undo.call(this);
      return somethingToLoad;
    };

    return MoveViewCommand;

  })(Command);

  this.MoveViewCommand = MoveViewCommand;

  SelectCommand = (function(_super) {
    __extends(SelectCommand, _super);

    function SelectCommand(items, updateParameters) {
      this.items = items;
      this.updateParameters = updateParameters;
      SelectCommand.__super__.constructor.call(this, "Select item");
      this.previouslySelectedItems = g.previouslySelectedItems.slice();
      return;
    }

    SelectCommand.prototype["do"] = function() {
      var item, items, _i, _j, _len, _len1, _ref, _ref1;
      g.previouslySelectedItems = this.previouslySelectedItems;
      _ref = this.previouslySelectedItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.deselect(false);
      }
      _ref1 = this.items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.select(false);
      }
      items = this.items.map(function(item) {
        return {
          tool: item.constructor,
          item: item
        };
      });
      g.updateParameters(items, true);
      SelectCommand.__super__["do"].call(this);
    };

    SelectCommand.prototype.undo = function() {
      var item, items, _i, _j, _len, _len1, _ref, _ref1;
      g.previouslySelectedItems = g.selectedItems.slice();
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.deselect(false);
      }
      _ref1 = this.previouslySelectedItems;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.select(false);
      }
      items = this.items.map(function(item) {
        return {
          tool: item.constructor,
          item: item
        };
      });
      g.updateParameters(items, true);
      SelectCommand.__super__.undo.call(this);
    };

    return SelectCommand;

  })(Command);

  this.SelectCommand = SelectCommand;

  CreateItemCommand = (function(_super) {
    __extends(CreateItemCommand, _super);

    function CreateItemCommand(item, name) {
      this.item = item;
      if (name == null) {
        name = null;
      }
      this.itemConstructor = this.item.constructor;
      CreateItemCommand.__super__.constructor.call(this, name);
      this.superDo();
      return;
    }

    CreateItemCommand.prototype.duplicateItem = function() {
      var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
      _ref = g.commandManager.history;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        if (command === this) {
          continue;
        }
        if ((command.item != null) && command.item === this.itemPk) {
          command.item = this.item;
        }
        if (command.items != null) {
          _ref1 = command.items;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            item = _ref1[i];
            if (item === this.itemPk) {
              command.items[i] = this.item;
            }
          }
        }
      }
      this.item.select();
    };

    CreateItemCommand.prototype.deleteItem = function() {
      var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
      this.data = this.item.getData();
      _ref = g.commandManager.history;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        if (command === this) {
          continue;
        }
        if ((command.item != null) && command.item === this.item) {
          command.item = this.item.pk || this.item.id;
        }
        if (command.items != null) {
          _ref1 = command.items;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            item = _ref1[i];
            if (item === this.item) {
              command.items[i] = this.item.pk || this.item.id;
            }
          }
        }
      }
      this.itemPk = this.item.pk || this.item.id;
      this.item["delete"]();
      this.item = null;
    };

    CreateItemCommand.prototype["do"] = function() {
      this.duplicateItem();
      CreateItemCommand.__super__["do"].call(this);
    };

    CreateItemCommand.prototype.undo = function() {
      this.deleteItem();
      CreateItemCommand.__super__.undo.call(this);
    };

    return CreateItemCommand;

  })(Command);

  this.CreateItemCommand = CreateItemCommand;

  CreatePathCommand = (function(_super) {
    __extends(CreatePathCommand, _super);

    function CreatePathCommand(item, name) {
      if (name == null) {
        name = null;
      }
      if (name == null) {
        name = "Create path";
      }
      CreatePathCommand.__super__.constructor.call(this, item, name);
      return;
    }

    CreatePathCommand.prototype.duplicateItem = function() {
      this.item = this.itemConstructor.duplicate(this.data, this.controlPathSegments);
      CreatePathCommand.__super__.duplicateItem.call(this);
    };

    CreatePathCommand.prototype.deleteItem = function() {
      var clone;
      clone = this.item.controlPath.clone();
      this.controlPathSegments = clone.segments;
      clone.remove();
      CreatePathCommand.__super__.deleteItem.call(this);
    };

    return CreatePathCommand;

  })(CreateItemCommand);

  this.CreatePathCommand = CreatePathCommand;

  DeletePathCommand = (function(_super) {
    __extends(DeletePathCommand, _super);

    function DeletePathCommand(item) {
      DeletePathCommand.__super__.constructor.call(this, item, 'Delete path', true);
    }

    DeletePathCommand.prototype["do"] = function() {
      this.deleteItem();
      this.superDo();
    };

    DeletePathCommand.prototype.undo = function() {
      this.duplicateItem();
      this.superUndo();
    };

    return DeletePathCommand;

  })(CreatePathCommand);

  this.DeletePathCommand = DeletePathCommand;

  CreateDivCommand = (function(_super) {
    __extends(CreateDivCommand, _super);

    function CreateDivCommand(item, name) {
      if (name == null) {
        name = null;
      }
      if (name == null) {
        name = "Create div";
      }
      CreateDivCommand.__super__.constructor.call(this, item, name);
      return;
    }

    CreateDivCommand.prototype.duplicateItem = function() {
      this.item = this.itemConstructor.duplicate(this.rectangle, this.data);
      CreateDivCommand.__super__.duplicateItem.call(this);
    };

    CreateDivCommand.prototype.deleteItem = function() {
      this.rectangle = this.item.rectangle;
      this.data = this.item.getData();
      CreateDivCommand.__super__.deleteItem.call(this);
    };

    CreateDivCommand.prototype["do"] = function() {
      CreateDivCommand.__super__["do"].call(this);
      return RMedia.prototype.isPrototypeOf(this.item);
    };

    return CreateDivCommand;

  })(CreateItemCommand);

  this.CreateDivCommand = CreateDivCommand;

  DeleteDivCommand = (function(_super) {
    __extends(DeleteDivCommand, _super);

    function DeleteDivCommand(item, name) {
      if (name == null) {
        name = null;
      }
      DeleteDivCommand.__super__.constructor.call(this, item, name || 'Delete div', true);
      return;
    }

    DeleteDivCommand.prototype["do"] = function() {
      this.deleteItem();
      this.superDo();
    };

    DeleteDivCommand.prototype.undo = function() {
      this.duplicateItem();
      this.superUndo();
      return RMedia.prototype.isPrototypeOf(this.item);
    };

    return DeleteDivCommand;

  })(CreateDivCommand);

  this.DeleteDivCommand = DeleteDivCommand;

  CreateLockCommand = (function(_super) {
    __extends(CreateLockCommand, _super);

    function CreateLockCommand(item, name) {
      CreateLockCommand.__super__.constructor.call(this, item, name || 'Create lock');
    }

    return CreateLockCommand;

  })(CreateDivCommand);

  this.CreateLockCommand = CreateLockCommand;

  DeleteLockCommand = (function(_super) {
    __extends(DeleteLockCommand, _super);

    function DeleteLockCommand(item) {
      DeleteLockCommand.__super__.constructor.call(this, item, 'Delete lock');
      return;
    }

    return DeleteLockCommand;

  })(DeleteDivCommand);

  this.DeleteLockCommand = DeleteLockCommand;

  AddPointCommand = (function(_super) {
    __extends(AddPointCommand, _super);

    function AddPointCommand(item, location, name) {
      this.item = item;
      this.location = location;
      if (name == null) {
        name = null;
      }
      AddPointCommand.__super__.constructor.call(this, name == null ? 'Add point on item' : name);
      return;
    }

    AddPointCommand.prototype.addPoint = function(update) {
      if (update == null) {
        update = true;
      }
      this.segment = this.item.addPoint(this.location, true, update);
    };

    AddPointCommand.prototype.deletePoint = function() {
      this.location = this.item.deletePoint(this.segment);
    };

    AddPointCommand.prototype["do"] = function() {
      this.addPoint();
      AddPointCommand.__super__["do"].call(this);
    };

    AddPointCommand.prototype.undo = function() {
      this.deletePoint();
      AddPointCommand.__super__.undo.call(this);
    };

    return AddPointCommand;

  })(Command);

  this.AddPointCommand = AddPointCommand;

  DeletePointCommand = (function(_super) {
    __extends(DeletePointCommand, _super);

    function DeletePointCommand(item, segment) {
      this.item = item;
      this.segment = segment;
      DeletePointCommand.__super__.constructor.call(this, this.item, this.segment, 'Delete point on item');
    }

    DeletePointCommand.prototype["do"] = function() {
      this.selectionState = {};
      this.selectionState.segment = this.item.selectionState.segment;
      this.previousPosition = new Point(this.selectionState.segment.point);
      this.previousHandleIn = new Point(this.selectionState.segment.handleIn);
      this.previousHandleOut = new Point(this.selectionState.segment.handleOut);
      this.deletePoint();
      this.superDo();
    };

    DeletePointCommand.prototype.undo = function() {
      this.addPoint(false);
      this.item.selectionState.segment = this.segment;
      this.item.changeSelectedSegment(this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      this.superUndo();
    };

    return DeletePointCommand;

  })(AddPointCommand);

  this.DeletePointCommand = DeletePointCommand;

  ChangeSelectedPointTypeCommand = (function(_super) {
    __extends(ChangeSelectedPointTypeCommand, _super);

    function ChangeSelectedPointTypeCommand(item, rtype) {
      this.item = item;
      this.rtype = rtype;
      this.selectionState = {};
      this.selectionState.segment = this.item.selectionState.segment;
      this.previousRType = this.selectionState.segment.rtype;
      this.previousPosition = new Point(this.selectionState.segment.point);
      this.previousHandleIn = new Point(this.selectionState.segment.handleIn);
      this.previousHandleOut = new Point(this.selectionState.segment.handleOut);
      ChangeSelectedPointTypeCommand.__super__.constructor.call(this, 'Change point type on item');
      return;
    }

    ChangeSelectedPointTypeCommand.prototype["do"] = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedPointType(this.rtype);
      ChangeSelectedPointTypeCommand.__super__["do"].call(this);
    };

    ChangeSelectedPointTypeCommand.prototype.undo = function() {
      this.item.selectionState.segment = this.selectionState.segment;
      this.item.changeSelectedPointType(this.previousRType, true, false);
      this.item.changeSelectedSegment(this.previousPosition, this.previousHandleIn, this.previousHandleOut);
      ChangeSelectedPointTypeCommand.__super__.undo.call(this);
    };

    return ChangeSelectedPointTypeCommand;

  })(Command);

  this.ChangeSelectedPointTypeCommand = ChangeSelectedPointTypeCommand;

  CommandManager = (function() {
    CommandManager.maxCommandNumber = 20;

    function CommandManager() {
      this.toggleCurrentCommand = __bind(this.toggleCurrentCommand, this);
      this.history = [];
      this.currentCommand = -1;
      this.historyJ = $("#History ul.history");
      return;
    }

    CommandManager.prototype.add = function(command, execute) {
      var currentLiJ, firstCommand, _ref;
      if (execute == null) {
        execute = false;
      }
      if (this.currentCommand >= this.constructor.maxCommandNumber - 1) {
        firstCommand = this.history.shift();
        firstCommand["delete"]();
        this.currentCommand--;
      }
      currentLiJ = (_ref = this.history[this.currentCommand]) != null ? _ref.liJ : void 0;
      if (currentLiJ != null) {
        currentLiJ.nextAll().remove();
      }
      this.historyJ.append(command.liJ);
      $("#History .mCustomScrollbar").mCustomScrollbar("scrollTo", "bottom");
      this.currentCommand++;
      this.history.splice(this.currentCommand, this.history.length - this.currentCommand, command);
      if (execute) {
        command["do"]();
      }
    };

    CommandManager.prototype.toggleCurrentCommand = function() {
      var deferred;
      console.log("toggleCurrentCommand");
      $('#loadingMask').css({
        'visibility': 'hidden'
      });
      document.removeEventListener('command executed', this.toggleCurrentCommand);
      if (this.currentCommand === this.commandIndex) {
        return;
      }
      deferred = this.history[this.currentCommand + this.offset].toggle();
      this.currentCommand += this.direction;
      if (deferred) {
        $('#loadingMask').css({
          'visibility': 'visible'
        });
        document.addEventListener('command executed', this.toggleCurrentCommand);
      } else {
        this.toggleCurrentCommand();
      }
    };

    CommandManager.prototype.commandClicked = function(command) {
      this.commandIndex = this.getCommandIndex(command);
      if (this.currentCommand === this.commandIndex) {
        return;
      }
      if (this.currentCommand > this.commandIndex) {
        this.direction = -1;
        this.offset = 0;
      } else {
        this.direction = 1;
        this.offset = 1;
      }
      this.toggleCurrentCommand();
    };

    CommandManager.prototype.getCommandIndex = function(command) {
      var c, i, _i, _len, _ref;
      _ref = this.history;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c === command) {
          return i;
        }
      }
      return -1;
    };

    CommandManager.prototype.getCurrentCommand = function() {
      return this.history[this.currentCommand];
    };

    CommandManager.prototype.clearHistory = function() {
      this.historyJ.empty();
      this.history = [];
      this.currentCommand = -1;
      this.add(new Command("Load Romanesco"), true);
    };

    return CommandManager;

  })();

  this.CommandManager = CommandManager;

}).call(this);

//# sourceMappingURL=command.map
