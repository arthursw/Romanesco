// Generated by CoffeeScript 1.7.1
(function() {
  var RDiv, RLink, RLock, RMedia, RSelectionRectangle, RText, RVideoGame, RWebsite,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RDiv = (function() {
    RDiv.modalTitle = '';

    RDiv.modalTitleUpdate = '';

    RDiv.object_type = 'div';

    RDiv.modalJ = $('#divModal');

    RDiv.modalJ.on('shown.bs.modal', function(event) {
      return RDiv.modalJ.find('input.form-control:visible:first').focus();
    });

    RDiv.modalJ.find('.submit-shortcut').keypress(function(event) {
      if (event.which === 13) {
        event.preventDefault();
        return RDiv.modalSubmit();
      }
    });

    RDiv.modalJ.find('.btn-primary').click(function(event) {
      return RDiv.modalSubmit();
    });

    RDiv.parameters = function() {
      var parameters, strokeColor, strokeWidth;
      strokeWidth = $.extend(true, {}, g.parameters.strokeWidth);
      strokeWidth["default"] = 1;
      strokeColor = $.extend(true, {}, g.parameters.strokeColor);
      strokeColor["default"] = 'black';
      return parameters = {
        'General': {
          align: g.parameters.align,
          distribute: g.parameters.distribute,
          duplicate: g.parameters.duplicate,
          "delete": g.parameters["delete"]
        },
        'Style': {
          strokeWidth: strokeWidth,
          strokeColor: strokeColor,
          fillColor: g.parameters.fillColor
        }
      };
    };

    RDiv.initFields = function() {
      this.modalJ.find('p.cost').show();
      this.modalJ.find('.url-name-group').show();
      this.modalJ.find('.name-group').hide();
      this.modalJ.find('.url-group').show();
      this.modalJ.find('.message-group').show();
      this.modalJ.find('.checkbox.restrict-area').hide();
      return this.modalJ.find('.checkbox.disable-toolbar').hide();
    };

    RDiv.save = function(rectangle, object_type, message, name, url, clonePk, website, restrictedArea, disableToolbar) {
      if (this.boxOverlapsTwoPlanets(rectangle)) {
        return;
      }
      if (rectangle.area === 0) {
        romanesco_alert("Error: your box is not valid.", "error");
        return;
      }
      switch (object_type) {
        case 'text':
        case 'media':
          return Dajaxice.draw.saveDiv(this.save_callback, {
            'box': this.boxFromRectangle(rectangle),
            'object_type': object_type,
            'message': message,
            'url': url,
            'clonePk': clonePk
          });
        default:
          return Dajaxice.draw.saveBox(this.save_callback, {
            'box': this.boxFromRectangle(rectangle),
            'object_type': object_type,
            'message': message,
            'name': name,
            'url': url,
            'clonePk': clonePk,
            'website': website,
            'restrictedArea': restrictedArea,
            'disableToolbar': disableToolbar
          });
      }
    };

    RDiv.save_callback = function(result, owner) {
      var br, div, tl;
      if (owner == null) {
        owner = true;
      }
      if (!g.checkError(result)) {
        return;
      }
      tl = g.posOnPlanetToProject(result.box.tl, result.box.planet);
      br = g.posOnPlanetToProject(result.box.br, result.box.planet);
      div = null;
      switch (result.object_type) {
        case 'text':
          div = new RText(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.locked, result.message, result.data);
          break;
        case 'media':
          div = new RMedia(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.locked, result.url, result.data);
          break;
        case 'lock':
          div = new RLock(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.message, true, result.data);
          break;
        case 'website':
          div = new RWebsite(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.message, result.data);
          break;
        case 'video-game':
          div = new RVideoGame(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.message, result.data);
          break;
        case 'link':
          div = new RLink(tl, new Size(br.subtract(tl)), result.owner, result.pk, result.message, result.name, result.url, result.data);
      }
      if (result.clonePk) {
        div.data = g.items[result.clonePk].data;
        div.parameterChanged();
      }
      if (owner) {
        g.chatSocket.emit("createDiv", result);
        if (result.clonePk == null) {
          return div.select();
        }
      }
    };

    RDiv.initModal = function(object_type, rectangle, div) {
      if (rectangle == null) {
        rectangle = null;
      }
      if (div == null) {
        div = null;
      }
      this.modalJ.object_type = object_type;
      this.modalJ.rectangle = rectangle;
      this.modalJ.update = div !== null;
      this.initFields();
      if (this.modalJ.update) {
        this.modalJ.find('p.cost').text("");
      }
      this.modalJ.find('input.url-name').val(div != null ? div.name : void 0);
      this.modalJ.find('input.url').val(div != null ? div.message : void 0);
      this.modalJ.find('input.message').val(div != null ? div.url : void 0);
      this.modalJ.find('.modal-title').text(this.modalTitle);
      if (this.modalJ.update) {
        this.modalJ.find('.btn-primary').text("Modify");
      } else {
        this.modalJ.find('.btn-primary').text("Add");
      }
      return this.modalJ.modal('show');
    };

    RDiv.modalSubmit = function() {
      var disableToolbar, message, name, object_type, restrictedArea, url, website;
      url = RDiv.modalJ.find("input.url").val();
      if (url.length > 0 && url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) {
        url = "http://" + url;
      }
      name = RDiv.modalJ.find("input.name").val();
      message = RDiv.modalJ.find("input.message").val();
      object_type = RDiv.modalJ.object_type;
      website = object_type === 'website' || object_type === 'video-game';
      restrictedArea = RDiv.modalJ.find('#divModalRestrictArea').is(':checked');
      disableToolbar = RDiv.modalJ.find('#divModalDisableToolbar').is(':checked');
      if (object_type === 'link') {
        name = RDiv.modalJ.find("input.url-name").val();
      }
      if (RDiv.modalJ.update) {
        if (div.url != null) {
          div.url = url;
        }
        if (div.name != null) {
          div.name = name;
        }
        if (div.message != null) {
          div.message = message;
        }
        div.update();
      } else {
        RDiv.save(RDiv.modalJ.rectangle, object_type, message, name, url, false, website, restrictedArea, disableToolbar);
      }
      return RDiv.modalJ.modal('hide');
    };

    RDiv.boxFromRectangle = function(rectangle) {
      var brOnPlanet, planet, points, tlOnPlanet;
      planet = pointToObj(projectToPlanet(rectangle.topLeft));
      tlOnPlanet = projectToPosOnPlanet(rectangle.topLeft, planet);
      brOnPlanet = projectToPosOnPlanet(rectangle.bottomRight, planet);
      points = [];
      points.push(pointToArray(tlOnPlanet));
      points.push(pointToArray(projectToPosOnPlanet(rectangle.topRight, planet)));
      points.push(pointToArray(brOnPlanet));
      points.push(pointToArray(projectToPosOnPlanet(rectangle.bottomLeft, planet)));
      points.push(pointToArray(tlOnPlanet));
      return {
        points: points,
        planet: pointToObj(planet),
        tl: tlOnPlanet,
        br: brOnPlanet
      };
    };

    RDiv.boxOverlapsTwoPlanets = function(box) {
      var limit;
      limit = getLimit();
      if ((box.left < limit.x && box.right > limit.x) || (box.top < limit.y && box.bottom > limit.y)) {
        romanesco_alert("You can not add anything in between two planets, this is not yet supported.", "info");
        return true;
      }
      return false;
    };

    function RDiv(position, size, owner, pk, locked, data) {
      var controller, folder, height, name, separatorJ, width, _i, _len, _ref, _ref1;
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      if (locked == null) {
        locked = false;
      }
      this.data = data;
      this.deselect = __bind(this.deselect, this);
      this.select = __bind(this.select, this);
      this.update = __bind(this.update, this);
      this.dragFinished = __bind(this.dragFinished, this);
      this.drag = __bind(this.drag, this);
      this.resize = __bind(this.resize, this);
      this.selectEnd = __bind(this.selectEnd, this);
      this.selectUpdate = __bind(this.selectUpdate, this);
      this.selectBegin = __bind(this.selectBegin, this);
      this.controller = this;
      this.object_type = this.constructor.object_type;
      separatorJ = g.stageJ.find("." + this.object_type + "-separator");
      this.divJ = g.templatesJ.find(".custom-div").clone().insertAfter(separatorJ);
      this.maskJ = this.divJ.find(".mask");
      width = this.size.width;
      height = this.size.height;
      if (this.data == null) {
        this.data = new Object();
        _ref = g.gui.__folders;
        for (name in _ref) {
          folder = _ref[name];
          if (name === 'General') {
            continue;
          }
          _ref1 = folder.__controllers;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            controller = _ref1[_i];
            this.data[controller.property] = controller.rValue();
          }
        }
      }
      this.divJ.css({
        width: width,
        height: height
      });
      this.updateTransform();
      if (this.owner !== g.me && locked) {
        this.divJ.addClass("locked");
      }
      this.divJ.attr("data-pk", this.pk);
      this.divJ.controller = this;
      this.setCss();
      if (!locked) {
        this.divJ.mousedown(this.selectBegin);
      }
      g.divs.push(this);
      g.items[this.pk] = this;
      if (g.selectedTool.name === 'Move') {
        this.disableInteraction();
      }
    }

    RDiv.prototype.duplicate = function() {
      this.constructor.save(this.getBounds(), this.object_type, this.message, this.name, this.url, this.pk);
    };

    RDiv.prototype.modify = function() {
      return this.constructor.initModal(this.getBounds(), this);
    };

    RDiv.prototype.updateTransform = function() {
      var css, viewPos;
      viewPos = view.projectToView(this.position);
      if (view.zoom === 1) {
        return this.divJ.css({
          'left': viewPos.x,
          'top': viewPos.y,
          'transform': 'none'
        });
      } else {
        css = 'translate(' + viewPos.x + 'px,' + viewPos.y + 'px)';
        css += ' scale(' + view.zoom + ')';
        return this.divJ.css({
          'transform': css,
          'top': 0,
          'left': 0
        });
      }
    };

    RDiv.prototype.zoom = function() {
      return this.updateTransform();
    };

    RDiv.prototype.getBounds = function() {
      return new Rectangle(this.position.x, this.position.y, this.divJ.outerWidth(), this.divJ.outerHeight());
    };

    RDiv.prototype.moveTo = function(position, userAction) {
      this.position = position.subtract(this.size.multiply(0.5));
      this.updateTransform();
      if (userAction) {
        g.defferedExecution(this.update, this.pk);
      }
    };

    RDiv.prototype.moveBy = function(delta, userAction) {
      this.position.x += delta.x;
      this.position.y += delta.y;
      this.updateTransform();
      if (userAction) {
        g.defferedExecution(this.update, this.pk);
      }
    };

    RDiv.prototype.posOnScreen = function() {
      var center, delta;
      center = new Point(g.stageJ.width() * 0.5, g.stageJ.height() * 0.5);
      delta = this.position.subtract(center);
      return new Point(center.add(delta.multiply(g.view.zoom)));
    };

    RDiv.prototype.posBeforeScaleX = function(posX) {
      var centerX;
      centerX = g.stageJ.width() * 0.5;
      return centerX + (posX - centerX) / g.view.zoom;
    };

    RDiv.prototype.posBeforeScaleY = function(posY) {
      var centerY;
      centerY = g.stageJ.height() * 0.5;
      return centerY + (posY - centerY) / g.view.zoom;
    };

    RDiv.prototype.posBeforeScale = function(pos) {
      return new Point(this.posBeforeScaleX(pos.x), this.posBeforeScaleY(pos.y));
    };

    RDiv.prototype.selectBegin = function(event, userAction) {
      var point, pos, targetJ;
      if (userAction == null) {
        userAction = true;
      }
      if (userAction && (g.selectedTool.name === 'Move' || event.which === 2)) {
        return;
      }
      this.dragging = false;
      this.draggedHandleJ = null;
      if (userAction && g.selectedDivs.indexOf(this) < 0) {
        if (!event.shiftKey) {
          g.deselectAll();
        }
        this.select();
      }
      point = userAction ? new Point(event.pageX, event.pageY) : view.projectToView(event.point);
      this.mouseDownPosition = point;
      targetJ = userAction ? $(event.target) : this.divJ.find(event.target);
      if (targetJ.is("textarea")) {
        this.selectingText = true;
        return true;
      }
      this.dragging = true;
      pos = this.posOnScreen();
      if (targetJ.hasClass("handle")) {
        this.draggedHandleJ = targetJ;
        pos.x += this.draggedHandleJ.position().left;
        pos.y += this.draggedHandleJ.position().top;
      }
      this.dragOffset = {};
      this.dragOffset.x = point.x - pos.x;
      return this.dragOffset.y = point.y - pos.y;
    };

    RDiv.prototype.selectUpdate = function(event, userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if (this.selectingText) {
        return;
      }
      if (!this.dragging) {
        event.delta.multiply(1 / view.zoom);
        if (event.delta != null) {
          this.moveBy(event.delta);
        }
        return true;
      }
      if (this.draggedHandleJ) {
        return this.resize(event, userAction);
      } else {
        return this.drag(event, userAction);
      }
    };

    RDiv.prototype.selectEnd = function(event, userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if (!this.dragging) {
        if (this.selectingText) {
          this.selectingText = false;
        }
        if (event.delta != null) {
          this.moveBy(event.delta);
        }
        return true;
      }
      if (this.mouseDownPosition.x !== event.pageX && this.mouseDownPosition.y !== event.pageY) {
        this.dragFinished(userAction);
      }
      this.dragging = false;
      return this.draggedHandleJ = null;
    };

    RDiv.prototype.disableInteraction = function() {
      this.maskJ.show();
    };

    RDiv.prototype.enableInteraction = function() {
      this.maskJ.hide();
    };

    RDiv.prototype.bottomRight = function() {
      return new Point(this.position.x + this.divJ.outerWidth(), this.position.y + this.divJ.outerHeight());
    };

    RDiv.prototype.resize = function(event, userAction) {
      var bottom, newHeight, newLeft, newTop, newWidth, point, pos, right;
      if (userAction == null) {
        userAction = true;
      }
      point = userAction ? new Point(event.pageX, event.pageY) : view.projectToView(event.point);
      pos = this.position;
      if (this.draggedHandleJ.hasClass("tl")) {
        right = pos.x + this.divJ.outerWidth();
        bottom = pos.y + this.divJ.outerHeight();
        newLeft = this.posBeforeScaleX(point.x - this.dragOffset.x);
        newLeft = g.snap1D(newLeft);
        newTop = this.posBeforeScaleY(point.y - this.dragOffset.y);
        newTop = g.snap1D(newTop);
        newWidth = right - newLeft;
        newHeight = bottom - newTop;
      } else if (this.draggedHandleJ.hasClass("tr")) {
        bottom = pos.y + this.divJ.outerHeight();
        newLeft = pos.x;
        newLeft = g.snap1D(newLeft);
        newTop = this.posBeforeScaleY(point.y - this.dragOffset.y);
        newTop = g.snap1D(newTop);
        newWidth = this.posBeforeScaleX(point.x - this.dragOffset.x) + this.draggedHandleJ.outerWidth() - newLeft;
        newHeight = bottom - newTop;
      } else if (this.draggedHandleJ.hasClass("br")) {
        newLeft = pos.x;
        newTop = pos.y;
        newTop = g.snap1D(newTop);
        newWidth = this.posBeforeScaleX(point.x - this.dragOffset.x) + this.draggedHandleJ.outerWidth() - newLeft;
        newHeight = this.posBeforeScaleY(point.y - this.dragOffset.y) + this.draggedHandleJ.outerHeight() - newTop;
      } else if (this.draggedHandleJ.hasClass("bl")) {
        right = pos.x + this.divJ.outerWidth();
        newLeft = this.posBeforeScaleX(point.x - this.dragOffset.x);
        newLeft = g.snap1D(newLeft);
        newTop = pos.y;
        newTop = g.snap1D(newTop);
        newWidth = right - newLeft;
        newHeight = this.posBeforeScaleY(point.y - this.dragOffset.y) + this.draggedHandleJ.outerHeight() - newTop;
      }
      this.position = new Point(newLeft, newTop);
      this.size = new Size(g.snap1D(newWidth), g.snap1D(newHeight));
      this.updateTransform();
      this.divJ.css({
        width: this.size.width,
        height: this.size.height
      });
      this.divJ.find(".handle").css({
        'z-index': 10
      });
    };

    RDiv.prototype.drag = function(event, userAction) {
      var point;
      if (userAction == null) {
        userAction = true;
      }
      point = userAction ? new Point(event.pageX, event.pageY) : view.projectToView(event.point);
      this.position = this.posBeforeScale(new Point(point.x - this.dragOffset.x, point.y - this.dragOffset.y));
      this.position = g.snap2D(this.position);
      this.updateTransform();
    };

    RDiv.prototype.dragFinished = function(userAction) {
      if (userAction == null) {
        userAction = true;
      }
      this.dragging = false;
      this.draggedHandleJ = null;
      if (userAction) {
        return this.update();
      }
    };

    RDiv.prototype.parameterChanged = function(update) {
      if (update == null) {
        update = true;
      }
      switch (this.changed) {
        case 'strokeWidth':
        case 'strokeColor':
        case 'fillColor':
          this.setCss();
      }
      if (update) {
        return g.defferedExecution(this.update, this.pk);
      }
    };

    RDiv.prototype.getStringifiedData = function() {
      return JSON.stringify(this.getData());
    };

    RDiv.prototype.getData = function() {
      return this.data;
    };

    RDiv.prototype.updateDiv_callback = function(result) {
      return g.checkError(result);
    };

    RDiv.prototype.update = function() {
      var br, data, tl;
      tl = this.position;
      br = this.bottomRight();
      if (this.constructor.boxOverlapsTwoPlanets(tl, br)) {
        return;
      }
      data = {
        box: this.constructor.boxFromRectangle(new Rectangle(tl, br)),
        pk: this.pk,
        object_type: this.object_type,
        message: this.message,
        url: this.url,
        data: this.getStringifiedData()
      };
      this.changed = null;
      if (this.object_type === 'text' || this.object_type === 'media') {
        return Dajaxice.draw.updateDiv(this.updateDiv_callback, data);
      } else {
        data.name = this.name;
        return Dajaxice.draw.updateBox(this.updateDiv_callback, data);
      }
    };

    RDiv.prototype.select = function() {
      if (this.divJ.hasClass("selected")) {
        return;
      }
      g.selectedDivs.push(this);
      if (g.selectedTool !== g.tools['Select']) {
        g.tools['Select'].select();
      }
      this.divJ.addClass("selected");
      return g.updateParameters({
        tool: this.constructor,
        item: this
      }, true);
    };

    RDiv.prototype.deselect = function() {
      if (!this.divJ.hasClass("selected")) {
        return;
      }
      this.divJ.removeClass("selected");
      return g.selectedDivs.remove(this);
    };

    RDiv.prototype.setCss = function() {
      this.setFillColor();
      this.setStrokeColor();
      return this.setStrokeWidth();
    };

    RDiv.prototype.setFillColor = function() {
      var _ref, _ref1;
      return (_ref = this.contentJ) != null ? _ref.css({
        'background-color': (_ref1 = this.data.fillColor) != null ? _ref1 : 'transparent'
      }) : void 0;
    };

    RDiv.prototype.setStrokeColor = function() {
      var _ref, _ref1;
      return (_ref = this.contentJ) != null ? _ref.css({
        'border-color': (_ref1 = this.data.strokeColor) != null ? _ref1 : 'transparent'
      }) : void 0;
    };

    RDiv.prototype.setStrokeWidth = function() {
      var _ref, _ref1;
      return (_ref = this.contentJ) != null ? _ref.css({
        'border-width': (_ref1 = this.data.strokeWidth) != null ? _ref1 : '0'
      }) : void 0;
    };

    RDiv.prototype.remove = function() {
      this.deselect();
      this.divJ.remove();
      g.divs.remove(this);
      if (g.divToUpdate === this) {
        delete g.divToUpdate;
      }
      return delete g.items[this.pk];
    };

    RDiv.prototype["delete"] = function() {
      this.remove();
      if (this.pk == null) {
        return;
      }
      if (this.object_type === 'text' || this.object_type === 'media') {
        return Dajaxice.draw.deleteDiv(this.deleteDiv_callback, {
          'pk': this.pk
        });
      } else {
        return Dajaxice.draw.deleteBox(this.deleteDiv_callback, {
          'pk': this.pk
        });
      }
    };

    RDiv.prototype.deleteDiv_callback = function(result) {
      if (g.checkError(result)) {
        g.chatSocket.emit("delete div", result.pk);
      }
    };

    return RDiv;

  })();

  this.RDiv = RDiv;

  RSelectionRectangle = (function(_super) {
    __extends(RSelectionRectangle, _super);

    RSelectionRectangle.object_type = 'lock';

    function RSelectionRectangle(rectangle, handler) {
      this.rectangle = rectangle;
      g.tools['Select'].select();
      RSelectionRectangle.__super__.constructor.call(this, rectangle.topLeft, rectangle.size);
      this.divJ.addClass("selection-rectangle");
      this.buttonJ = $("<button>");
      this.buttonJ.text("Take snapshot");
      this.buttonJ.click(function(event) {
        return handler();
      });
      this.divJ.append(this.buttonJ);
      this.select();
      return;
    }

    RSelectionRectangle.prototype.updateTransform = function() {
      var css, viewPos;
      viewPos = view.projectToView(this.position);
      css = 'translate(' + viewPos.x + 'px,' + viewPos.y + 'px)';
      this.divJ.css({
        'transform': css
      });
    };

    RSelectionRectangle.prototype.deselect = function() {
      if (this.deselected) {
        return;
      }
      this.deselected = true;
      this.remove();
    };

    RSelectionRectangle.prototype.update = function() {};

    return RSelectionRectangle;

  })(RDiv);

  this.RSelectionRectangle = RSelectionRectangle;

  RLock = (function(_super) {
    __extends(RLock, _super);

    RLock.modalTitle = "Lock an area";

    RLock.modalTitleUpdate = "Modify your lock";

    RLock.object_type = 'lock';

    RLock.modalJ.find("#divModalTypeSelector").click(function(event) {
      RLock.initFields();
    });

    RLock.initFields = function() {
      var area, cost, object_type, typeSelectorJ;
      this.modalJ.find('#divModalTypeSelector').show();
      typeSelectorJ = this.modalJ.find('input[type=radio][name=typeSelector]:checked');
      object_type = typeSelectorJ[0].value;
      this.modalJ.object_type = object_type;
      area = this.modalJ.rectangle.area;
      cost = area;
      switch (object_type) {
        case 'lock':
          this.modalJ.find('.checkbox.restrict-area').hide();
          this.modalJ.find('.checkbox.disable-toolbar').hide();
          this.modalJ.find('.url-name-group').hide();
          this.modalJ.find('.name-group').hide();
          this.modalJ.find('.url-group').hide();
          this.modalJ.find('.message-group').show();
          cost = area / 1000;
          break;
        case 'link':
          this.modalJ.find('.checkbox.restrict-area').hide();
          this.modalJ.find('.checkbox.disable-toolbar').hide();
          this.modalJ.find('.url-name-group').show();
          this.modalJ.find('.name-group').hide();
          this.modalJ.find('.url-group').show();
          this.modalJ.find('.message-group').show();
          cost = area;
          break;
        case 'website':
          this.modalJ.find('.checkbox.restrict-area').show();
          this.modalJ.find('.checkbox.disable-toolbar').show();
          this.modalJ.find('.url-name-group').hide();
          this.modalJ.find('.name-group').show();
          this.modalJ.find('.url-group').hide();
          this.modalJ.find('.message-group').hide();
          cost = 2 * area / 1000;
          break;
        case 'video-game':
          this.modalJ.find('.checkbox.restrict-area').hide();
          this.modalJ.find('.checkbox.disable-toolbar').hide();
          this.modalJ.find('.url-name-group').hide();
          this.modalJ.find('.name-group').show();
          this.modalJ.find('.url-group').hide();
          this.modalJ.find('.message-group').show();
          cost = 2 * area / 1000;
      }
      if (g.credit < cost) {
        return g.romanesco_alert("You do not have enough romanescoins to add this link", "error");
      } else {
        return this.modalJ.find('p.cost').text("" + area + " pixels = " + cost.toFixed(2) + " romanescoins");
      }
    };

    RLock.intersectPoint = function(point) {
      var lock, _i, _len, _ref;
      _ref = g.locks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lock = _ref[_i];
        if (lock.getBounds().contains(point) && g.me !== lock.owner) {
          return true;
        }
      }
      return false;
    };

    RLock.intersectRect = function(rectangle) {
      var lock, _i, _len, _ref;
      _ref = g.locks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lock = _ref[_i];
        if (lock.getBounds().intersects(new Rectangle(rectangle)) && g.me !== lock.owner) {
          return true;
        }
      }
      return false;
    };

    RLock.initModal = function(rectangle, div) {
      if (rectangle == null) {
        rectangle = null;
      }
      if (div == null) {
        div = null;
      }
      return RLock.__super__.constructor.initModal.call(this, this.object_type, rectangle, div);
    };

    RLock.parameters = function() {
      var parameters;
      parameters = RLock.__super__.constructor.parameters.call(this);
      parameters['Lock'] = {
        backgroundMode: {
          type: 'checkbox',
          label: 'Send to back',
          "default": false
        }
      };
      return parameters;
    };

    function RLock(position, size, owner, pk, message, popover, data) {
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.message = message;
      if (popover == null) {
        popover = true;
      }
      this.data = data;
      this.selectEnd = __bind(this.selectEnd, this);
      this.selectUpdate = __bind(this.selectUpdate, this);
      this.selectBegin = __bind(this.selectBegin, this);
      this.deselect = __bind(this.deselect, this);
      this.select = __bind(this.select, this);
      this.resize = __bind(this.resize, this);
      this.drag = __bind(this.drag, this);
      RLock.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.owner !== g.me, this.data);
      this.contentJ = g.templatesJ.find(".lock-content").clone().insertBefore(this.maskJ);
      this.contentJ = this.divJ.find(".lock-content:first");
      this.divJ.addClass("lock");
      if (this.data.strokeColor == null) {
        this.data.strokeColor = '#adadad';
      }
      if (this.data.strokeWidth == null) {
        this.data.strokeWidth = 1;
      }
      this.setCss();
      if (popover) {
        this.contentJ.popover({
          placement: 'auto top',
          trigger: 'click',
          content: this.message
        });
        this.popover = this.contentJ.data('bs.popover');
      } else if (this.owner !== g.me) {
        this.disableInteraction();
      }
      if (this.owner === g.me) {
        this.updateBackgroundMode(true);
      }
      g.locks.push(this);
    }

    RLock.prototype.drag = function(event, userAction) {
      var _ref;
      if (userAction == null) {
        userAction = true;
      }
      RLock.__super__.drag.call(this, event, userAction);
      if (!$(event.target).hasClass('lock-content')) {
        return (_ref = this.contentJ) != null ? _ref.popover('hide') : void 0;
      }
    };

    RLock.prototype.resize = function(event, userAction) {
      var _ref;
      if (userAction == null) {
        userAction = true;
      }
      RLock.__super__.resize.call(this, event, userAction);
      return (_ref = this.contentJ) != null ? _ref.popover('hide') : void 0;
    };

    RLock.prototype.select = function() {
      if (this.owner !== g.me) {
        return;
      }
      RLock.__super__.select.call(this);
    };

    RLock.prototype.deselect = function() {
      var _ref;
      if ((_ref = this.contentJ) != null) {
        _ref.popover('hide');
      }
      this.updateBackgroundMode(true);
      return RLock.__super__.deselect.call(this);
    };

    RLock.prototype.remove = function() {
      var _ref;
      g.locks.splice(g.locks.indexOf(this), 1);
      RLock.__super__.remove.call(this);
      if ((_ref = this.controlPath) != null) {
        _ref.remove();
      }
      this.controlPath = null;
    };

    RLock.prototype["delete"] = function() {
      var _ref;
      if ((_ref = this.contentJ) != null) {
        _ref.popover('hide');
      }
      return RLock.__super__["delete"].call(this);
    };

    RLock.prototype.update = function() {
      this.contentJ.attr('data-content', this.message);
      return RLock.__super__.update.call(this);
    };

    RLock.prototype.selectBegin = function(event, userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if (userAction && this.owner !== g.me) {
        return;
      }
      if (this.data.backgroundMode) {
        this.updateBackgroundMode(false);
        this.select();
        return;
      }
      return RLock.__super__.selectBegin.call(this, event, userAction);
    };

    RLock.prototype.selectUpdate = function(event, userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if ((userAction && this.owner !== g.me) || this.data.backgroundMode) {
        return;
      }
      return RLock.__super__.selectUpdate.call(this, event, userAction);
    };

    RLock.prototype.selectEnd = function(event, userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if ((userAction && this.owner !== g.me) || this.data.backgroundMode) {
        return;
      }
      return RLock.__super__.selectEnd.call(this, event, userAction);
    };

    RLock.prototype.updateBackgroundMode = function(value) {
      var _ref;
      if (this.owner !== g.me) {
        return;
      }
      if (value != null) {
        this.data.backgroundMode = value;
      }
      if ((_ref = this.controlPath) != null) {
        _ref.remove();
      }
      if (this.data.backgroundMode) {
        this.controlPath = new Path.Rectangle(this.position, this.size);
        this.controlPath.name = 'rlock control path';
        this.controlPath.strokeWidth = this.data.strokeWidth > 0 ? this.data.strokeWidth : 1;
        this.controlPath.strokeColor = this.data.strokeColor != null ? this.data.strokeColor : 'black';
        this.controlPath.controller = this;
        this.divJ.hide();
      } else {
        this.divJ.show();
      }
      return view.draw();
    };

    RLock.prototype.parameterChanged = function(update) {
      if (update == null) {
        update = true;
      }
      switch (this.changed) {
        case 'backgroundMode':
          this.updateBackgroundMode();
      }
      return RLock.__super__.parameterChanged.call(this, update);
    };

    return RLock;

  })(RDiv);

  this.RLock = RLock;

  RWebsite = (function(_super) {
    __extends(RWebsite, _super);

    RWebsite.object_type = 'website';

    function RWebsite(position, size, owner, pk, message, data) {
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.message = message;
      this.data = data;
      RWebsite.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.message, false, this.data);
      this.maskJ.mousedown(function(event) {
        g.tools['Move'].select();
      });
      this.maskJ.mouseup(function(event) {
        var _ref;
        if ((_ref = g.previousTool) != null) {
          _ref.select();
        }
      });
      if (this.owner !== g.me) {
        this.divJ.addClass("website");
      }
    }

    RWebsite.prototype.enableInteraction = function() {
      this.maskJ.hide();
    };

    return RWebsite;

  })(RLock);

  this.RWebsite = RWebsite;

  RVideoGame = (function(_super) {
    __extends(RVideoGame, _super);

    RVideoGame.object_type = 'video-game';

    function RVideoGame(position, size, owner, pk, message, data) {
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.message = message;
      this.data = data;
      RVideoGame.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.message, false, this.data);
      this.maskJ.mousedown(function(event) {
        g.tools['Move'].select();
      });
      this.maskJ.mouseup(function(event) {
        var _ref;
        if ((_ref = g.previousTool) != null) {
          _ref.select();
        }
      });
      this.divJ.addClass("video-game");
      this.currentCheckpoint = -1;
      this.checkpoints = [];
    }

    RVideoGame.prototype.getData = function() {
      var data;
      data = RVideoGame.__super__.getData.call(this);
      data.loadEntireArea = true;
      return data;
    };

    RVideoGame.prototype.enableInteraction = function() {
      this.maskJ.hide();
    };

    RVideoGame.prototype.initGUI = function() {
      console.log("Gui init");
    };

    RVideoGame.prototype.updateGame = function(tool) {
      var checkpoint, _i, _len, _ref;
      _ref = this.checkpoints;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkpoint = _ref[_i];
        if (checkpoint.contains(tool.car.position)) {
          if (this.currentCheckpoint === checkpoint.data.checkpointNumber - 1) {
            this.currentCheckpoint = checkpoint.data.checkpointNumber;
            if (this.currentCheckpoint === 0) {
              this.startTime = Date.now();
              romanesco_alert("Game started, go go go!", "success");
            } else {
              romanesco_alert("Checkpoint " + this.currentCheckpoint + " passed!", "success");
            }
          }
          if (this.currentCheckpoint === this.checkpoints.length - 1) {
            this.finishGame();
          }
        }
      }
    };

    RVideoGame.prototype.finishGame = function() {
      var time;
      time = (Date.now() - this.startTime) / 1000;
      romanesco_alert("You won ! Your time is: " + time.toFixed(2) + " seconds.", "success");
      this.currentCheckpoint = -1;
    };

    return RVideoGame;

  })(RLock);

  this.RVideoGame = RVideoGame;

  RLink = (function(_super) {
    __extends(RLink, _super);

    RLink.modalTitle = "Insert a hyperlink";

    RLink.modalTitleUpdate = "Modify your link";

    RLink.object_type = 'link';

    RLink.parameters = function() {
      var parameters;
      parameters = RLink.__super__.constructor.parameters.call(this);
      delete parameters['Lock'];
      return parameters;
    };

    function RLink(position, size, owner, pk, message, name, url, data) {
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.message = message;
      this.name = name;
      this.url = url;
      this.data = data;
      RLink.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.message, false, this.data);
      this.divJ.addClass("link");
      this.setPopover();
      this.linkJ = $('<a href="' + this.url + '"></a>');
      this.contentJ.append(this.linkJ);
    }

    RLink.prototype.setPopover = function() {
      var popoverOptions;
      popoverOptions = {
        placement: 'auto top',
        trigger: 'hover'
      };
      if ((this.message != null) && this.message.length > 0) {
        popoverOptions.content = this.message;
        if ((this.name != null) && this.name.length > 0) {
          popoverOptions.title = this.name;
        }
      } else if ((this.name != null) && this.name.length > 0) {
        popoverOptions.content = this.name;
      }
      this.contentJ.popover(popoverOptions);
      this.contentJ.addClass("link-content");
      return this.popover = this.contentJ.data('bs.popover');
    };

    RLink.prototype.update = function() {
      this.contentJ.attr('data-title', this.name);
      this.contentJ.attr('data-content', this.message);
      this.linkJ.attr("href", this.url);
      return RLink.__super__.update.call(this);
    };

    RLink.prototype.updateBackgroundMode = function(value) {};

    return RLink;

  })(RLock);

  this.RLink = RLink;

  RText = (function(_super) {
    __extends(RText, _super);

    RText.modalTitle = "Insert some text";

    RText.modalTitleUpdate = "Modify your text";

    RText.object_type = 'text';

    RText.parameters = function() {
      var parameters;
      parameters = RText.__super__.constructor.parameters.call(this);
      parameters['Font'] = {
        fontName: {
          type: 'input-typeahead',
          label: 'Font name',
          "default": '',
          initializeController: function(controller, item) {
            var input, inputValue, typeaheadJ;
            typeaheadJ = $(controller.domElement);
            input = typeaheadJ.find("input");
            inputValue = null;
            input.typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            }, {
              valueKey: 'value',
              displayKey: 'value',
              source: g.typeaheadFontEngine.ttAdapter()
            });
            input.on('typeahead:opened', function() {
              var dropDown;
              dropDown = typeaheadJ.find(".tt-dropdown-menu");
              dropDown.insertAfter(typeaheadJ.parents('.cr:first'));
              dropDown.css({
                position: 'relative',
                display: 'inline-block',
                right: 0
              });
            });
            input.on('typeahead:closed', function() {
              var _i, _len, _ref;
              if (inputValue != null) {
                input.val(inputValue);
              } else {
                inputValue = input.val();
              }
              _ref = g.selectedItems();
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (typeof item.setFontFamily === "function") {
                  item.setFontFamily(inputValue);
                }
              }
            });
            input.on('typeahead:cursorchanged', function() {
              inputValue = input.val();
            });
            input.on('typeahead:selected', function() {
              inputValue = input.val();
            });
            input.on('typeahead:autocompleted', function() {
              inputValue = input.val();
            });
            if ((item != null ? item.data.fontFamily : void 0) != null) {
              input.val(item.data.fontFamily);
            }
          }
        },
        effect: {
          type: 'dropdown',
          label: 'Effect',
          values: ['none', 'anaglyph', 'brick-sign', 'canvas-print', 'crackle', 'decaying', 'destruction', 'distressed', 'distressed-wood', 'fire', 'fragile', 'grass', 'ice', 'mitosis', 'neon', 'outline', 'puttinggreen', 'scuffed-steel', 'shadow-multiple', 'static', 'stonewash', '3d', '3d-float', 'vintage', 'wallpaper'],
          "default": 'none'
        },
        styles: {
          type: 'button-group',
          label: 'Styles',
          value: '',
          setValue: function(value, item) {
            var fontStyleJ, _ref, _ref1, _ref2;
            fontStyleJ = $("#fontStyle:first");
            if ((item != null ? item.data.fontStyle : void 0) != null) {
              if (item.data.fontStyle.italic) {
                fontStyleJ.find("[name='italic']").addClass("active");
              }
              if (item.data.fontStyle.bold) {
                fontStyleJ.find("[name='bold']").addClass("active");
              }
              if (((_ref = item.data.fontStyle.decoration) != null ? _ref.indexOf('underline') : void 0) >= 0) {
                fontStyleJ.find("[name='underline']").addClass("active");
              }
              if (((_ref1 = item.data.fontStyle.decoration) != null ? _ref1.indexOf('overline') : void 0) >= 0) {
                fontStyleJ.find("[name='overline']").addClass("active");
              }
              if (((_ref2 = item.data.fontStyle.decoration) != null ? _ref2.indexOf('line-through') : void 0) >= 0) {
                return fontStyleJ.find("[name='line-through']").addClass("active");
              }
            }
          },
          initializeController: function(controller, item) {
            var fontStyleJ, setStyles;
            $(controller.domElement).find('input').remove();
            setStyles = function(value) {
              var _i, _len, _ref;
              _ref = g.selectedItems();
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (typeof item.changeFontStyle === "function") {
                  item.changeFontStyle(value);
                }
              }
            };
            g.templatesJ.find("#fontStyle").clone().appendTo(controller.domElement);
            fontStyleJ = $("#fontStyle:first");
            fontStyleJ.find("[name='italic']").click(function(event) {
              return setStyles('italic');
            });
            fontStyleJ.find("[name='bold']").click(function(event) {
              return setStyles('bold');
            });
            fontStyleJ.find("[name='underline']").click(function(event) {
              return setStyles('underline');
            });
            fontStyleJ.find("[name='overline']").click(function(event) {
              return setStyles('overline');
            });
            fontStyleJ.find("[name='line-through']").click(function(event) {
              return setStyles('line-through');
            });
            controller.rSetValue(item);
          }
        },
        align: {
          type: 'radio-button-group',
          label: 'Align',
          value: '',
          initializeController: function(controller, item) {
            var setStyles, textAlignJ;
            $(controller.domElement).find('input').remove();
            setStyles = function(value) {
              var _i, _len, _ref;
              _ref = g.selectedItems();
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (typeof item.changeFontStyle === "function") {
                  item.changeFontStyle(value);
                }
              }
            };
            g.templatesJ.find("#textAlign").clone().appendTo(controller.domElement);
            textAlignJ = $("#textAlign:first");
            textAlignJ.find(".justify").click(function(event) {
              return setStyles('justify');
            });
            textAlignJ.find(".align-left").click(function(event) {
              return setStyles('left');
            });
            textAlignJ.find(".align-center").click(function(event) {
              return setStyles('center');
            });
            textAlignJ.find(".align-right").click(function(event) {
              return setStyles('right');
            });
          }
        },
        fontSize: {
          type: 'slider',
          label: 'Font size',
          min: 5,
          max: 300,
          "default": 11
        },
        fontColor: {
          type: 'color',
          label: 'Color',
          "default": 'black',
          defaultCheck: true
        }
      };
      return parameters;
    };

    RText.initFields = function() {
      this.modalJ.find('.url-name-group').hide();
      this.modalJ.find('.name-group').hide();
      this.modalJ.find('.url-group').hide();
      this.modalJ.find('.message-group').show();
      this.modalJ.find('#divModalTypeSelector').hide();
      this.modalJ.find('.checkbox.restrict-area').hide();
      return this.modalJ.find('.checkbox.disable-toolbar').hide();
    };

    RText.initModal = function(rectangle, div) {
      if (rectangle == null) {
        rectangle = null;
      }
      if (div == null) {
        div = null;
      }
      return RText.__super__.constructor.initModal.call(this, this.object_type, rectangle, div);
    };

    function RText(position, size, owner, pk, locked, message, data) {
      var lockedForMe;
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.locked = locked;
      this.message = message != null ? message : '';
      this.data = data;
      this.changeFontStyle = __bind(this.changeFontStyle, this);
      this.textChanged = __bind(this.textChanged, this);
      RText.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.locked && this.owner !== g.me, this.data);
      this.contentJ = $("<textarea></textarea>");
      this.contentJ.insertBefore(this.maskJ);
      this.contentJ.val(this.message);
      lockedForMe = this.owner !== g.me && this.locked;
      if (lockedForMe) {
        message = this.message;
        this.contentJ[0].addEventListener("input", (function() {
          return this.value = message;
        }), false);
      }
      this.setCss();
      this.contentJ.focus(function() {
        return $(this).addClass("selected form-control");
      });
      this.contentJ.blur(function() {
        return $(this).removeClass("selected form-control");
      });
      if (!lockedForMe) {
        this.contentJ.bind('input propertychange', (function(_this) {
          return function(event) {
            return _this.textChanged(event);
          };
        })(this));
      }
      if ((this.data != null) && Object.keys(this.data).length > 0) {
        this.setFont(false);
      }
    }

    RText.prototype.textChanged = function(event) {
      this.message = this.contentJ.val();
      g.chatSocket.emit("parameter change", g.me, this.pk, "message", this.message);
      return g.defferedExecution(this.update, this.pk, 1000);
    };

    RText.prototype.setFontFamily = function(fontFamily, update) {
      var available, item, _i, _len, _ref;
      if (update == null) {
        update = true;
      }
      if (fontFamily == null) {
        return;
      }
      available = false;
      _ref = g.availableFonts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.family === fontFamily) {
          available = true;
          break;
        }
      }
      if (!available) {
        return;
      }
      this.data.fontFamily = fontFamily;
      g.addFont(fontFamily, this.data.effect);
      g.loadFonts();
      this.contentJ.css({
        "font-family": "'" + fontFamily + "', 'Helvetica Neue', Helvetica, Arial, sans-serif"
      });
      if (update) {
        this.update();
        g.chatSocket.emit("parameter change", g.me, this.pk, "fontFamily", this.data.fontFamily);
      }
    };

    RText.prototype.changeFontStyle = function(value) {
      var _base, _base1;
      if (value == null) {
        return;
      }
      if (typeof value !== 'string') {
        return;
      }
      if ((_base = this.data).fontStyle == null) {
        _base.fontStyle = {};
      }
      if ((_base1 = this.data.fontStyle).decoration == null) {
        _base1.decoration = '';
      }
      switch (value) {
        case 'underline':
          if (this.data.fontStyle.decoration.indexOf(' underline') >= 0) {
            this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' underline', '');
          } else {
            this.data.fontStyle.decoration += ' underline';
          }
          break;
        case 'overline':
          if (this.data.fontStyle.decoration.indexOf(' overline') >= 0) {
            this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' overline', '');
          } else {
            this.data.fontStyle.decoration += ' overline';
          }
          break;
        case 'line-through':
          if (this.data.fontStyle.decoration.indexOf(' line-through') >= 0) {
            this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' line-through', '');
          } else {
            this.data.fontStyle.decoration += ' line-through';
          }
          break;
        case 'italic':
          this.data.fontStyle.italic = !this.data.fontStyle.italic;
          break;
        case 'bold':
          this.data.fontStyle.bold = !this.data.fontStyle.bold;
          break;
        case 'justify':
        case 'left':
        case 'right':
        case 'center':
          this.data.fontStyle.align = value;
      }
      this.setFontStyle(true);
      return g.chatSocket.emit("parameter change", g.me, this.pk, "fontStyle", this.data.fontStyle);
    };

    RText.prototype.setFontStyle = function(update) {
      var _ref, _ref1, _ref2, _ref3;
      if (update == null) {
        update = true;
      }
      if (((_ref = this.data.fontStyle) != null ? _ref.italic : void 0) != null) {
        this.contentJ.css({
          "font-style": this.data.fontStyle.italic ? "italic" : "normal"
        });
      }
      if (((_ref1 = this.data.fontStyle) != null ? _ref1.bold : void 0) != null) {
        this.contentJ.css({
          "font-weight": this.data.fontStyle.bold ? "bold" : "normal"
        });
      }
      if (((_ref2 = this.data.fontStyle) != null ? _ref2.decoration : void 0) != null) {
        this.contentJ.css({
          "text-decoration": this.data.fontStyle.decoration
        });
      }
      if (((_ref3 = this.data.fontStyle) != null ? _ref3.align : void 0) != null) {
        this.contentJ.css({
          "text-align": this.data.fontStyle.align
        });
      }
      if (update) {
        this.update();
      }
    };

    RText.prototype.setFontSize = function(fontSize, update) {
      if (update == null) {
        update = true;
      }
      if (fontSize == null) {
        return;
      }
      this.data.fontSize = fontSize;
      this.contentJ.css({
        "font-size": fontSize + "px"
      });
      if (update) {
        this.update();
      }
    };

    RText.prototype.setFontEffect = function(fontEffect, update) {
      var className, _i, _len, _ref;
      if (update == null) {
        update = true;
      }
      if (fontEffect == null) {
        return;
      }
      g.addFont(this.data.fontFamily, fontEffect);
      _ref = this.contentJ[0].classList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        if (className.indexOf("font-effect-") >= 0) {
          this.contentJ.removeClass(className);
        }
      }
      g.loadFonts();
      this.contentJ.addClass("font-effect-" + fontEffect);
      if (update) {
        this.update();
      }
    };

    RText.prototype.setFontColor = function(fontColor, update) {
      if (update == null) {
        update = true;
      }
      this.contentJ.css({
        "color": fontColor != null ? fontColor : 'black'
      });
    };

    RText.prototype.setFont = function(update) {
      if (update == null) {
        update = true;
      }
      this.setFontStyle(update);
      this.setFontFamily(this.data.fontFamily, update);
      this.setFontSize(this.data.fontSize, update);
      this.setFontEffect(this.data.effect, update);
      return this.setFontColor(this.data.fontColor, update);
    };

    RText.prototype.parameterChanged = function(update) {
      if (update == null) {
        update = true;
      }
      if (!update && (this.data.message != null)) {
        this.contentJ.val(this.data.message);
      }
      switch (this.changed) {
        case 'fontStyle':
        case 'fontFamily':
        case 'fontSize':
        case 'effect':
        case 'fontColor':
          this.setFont(false);
      }
      return RText.__super__.parameterChanged.call(this, update);
    };

    RText.prototype.getData = function() {
      var data;
      data = jQuery.extend({}, this.data);
      delete data.message;
      return data;
    };

    RText.prototype["delete"] = function() {
      if (this.contentJ.hasClass("selected")) {
        return;
      }
      return RText.__super__["delete"].call(this);
    };

    return RText;

  })(RDiv);

  this.RText = RText;

  RMedia = (function(_super) {
    __extends(RMedia, _super);

    RMedia.modalTitle = "Insert a media";

    RMedia.modalTitleUpdate = "Modify your media";

    RMedia.object_type = 'media';

    RMedia.parameters = function() {
      var parameters;
      parameters = RMedia.__super__.constructor.parameters.call(this);
      parameters['Media'] = {
        url: {
          type: 'input',
          label: 'URL',
          "default": 'http://',
          onChange: function() {
            return RMedia.selectedDivs = g.selectedDivs;
          },
          onFinishChange: function(value) {
            var selectedDiv, _i, _len, _ref, _results;
            _ref = RMedia.selectedDivs;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              selectedDiv = _ref[_i];
              _results.push(selectedDiv === RMedia.selectedDiv ? selectedDiv != null ? selectedDiv.urlChanged(value, true) : void 0 : void 0);
            }
            return _results;
          }
        },
        fitImage: {
          type: 'checkbox',
          label: 'Fit image',
          "default": false
        }
      };
      return parameters;
    };

    RMedia.initFields = function() {
      this.modalJ.find('.url-name-group').hide();
      this.modalJ.find('.name-group').hide();
      this.modalJ.find('.url-group').show();
      this.modalJ.find('.message-group').hide();
      this.modalJ.find('#divModalTypeSelector').hide();
      this.modalJ.find('.checkbox.restrict-area').hide();
      return this.modalJ.find('.checkbox.disable-toolbar').hide();
    };

    RMedia.initModal = function(rectangle, div) {
      if (rectangle == null) {
        rectangle = null;
      }
      if (div == null) {
        div = null;
      }
      return RMedia.__super__.constructor.initModal.call(this, this.object_type, rectangle, div);
    };

    function RMedia(position, size, owner, pk, locked, url, data) {
      this.position = position;
      this.size = size;
      this.owner = owner;
      this.pk = pk;
      this.locked = locked;
      this.url = url != null ? url : '';
      this.data = data;
      this.afterEmbed = __bind(this.afterEmbed, this);
      this.urlChanged = __bind(this.urlChanged, this);
      this.loadMedia = __bind(this.loadMedia, this);
      this.dragFinished = __bind(this.dragFinished, this);
      this.resize = __bind(this.resize, this);
      RMedia.__super__.constructor.call(this, this.position, this.size, this.owner, this.pk, this.locked && this.owner !== g.me, this.data);
      this.data.url = this.url;
      if ((url != null) && url.length > 0) {
        this.urlChanged(this.url, false);
      }
      this.sizeChanged = false;
    }

    RMedia.prototype.resize = function(event, userAction) {
      var height, width, _ref;
      if (userAction == null) {
        userAction = true;
      }
      RMedia.__super__.resize.call(this, event, userAction);
      if (this.isImage != null) {
        return;
      }
      this.sizeChanged = true;
      width = this.divJ.width();
      height = this.divJ.height();
      return (_ref = this.contentJ) != null ? _ref.find("iframe").attr("width", width).attr("height", height) : void 0;
    };

    RMedia.prototype.dragFinished = function(userAction) {
      if (userAction == null) {
        userAction = true;
      }
      if (this.sizeChanged) {
        this.urlChanged(this.url, false);
      }
      this.sizeChanged = false;
      return RMedia.__super__.dragFinished.call(this, userAction);
    };

    RMedia.prototype.toggleFitImage = function() {
      if (this.isImage != null) {
        return this.contentJ.toggleClass("fit-image", this.data.fitImage);
      }
    };

    RMedia.prototype.parameterChanged = function(update) {
      if (update == null) {
        update = true;
      }
      switch (this.changed) {
        case 'fitImage':
          this.toggleFitImage();
      }
      return RMedia.__super__.parameterChanged.call(this, update);
    };

    RMedia.prototype.hasImageUrlExt = function(url) {
      var ext, exts;
      exts = ["jpeg", "jpg", "gif", "png"];
      ext = url.substring(url.lastIndexOf(".") + 1);
      if (__indexOf.call(exts, ext) >= 0) {
        return true;
      }
      return false;
    };

    RMedia.prototype.checkIsImage = function() {
      var image, timedOut, timeout, timer;
      console.log('check is image: ' + this.url + ', ' + this.pk);
      timedOut = false;
      timeout = this.hasImageUrlExt(this.url) ? 5000 : 1000;
      image = new Image();
      timer = setTimeout((function(_this) {
        return function() {
          timedOut = true;
          _this.loadMedia("timeout");
        };
      })(this), timeout);
      image.onerror = image.onabort = (function(_this) {
        return function() {
          if (!timedOut) {
            clearTimeout(timer);
            return _this.loadMedia('error');
          }
        };
      })(this);
      image.onload = (function(_this) {
        return function() {
          var _ref;
          if (!timedOut) {
            clearTimeout(timer);
          } else {
            if ((_ref = _this.contentJ) != null) {
              _ref.remove();
            }
          }
          return _this.loadMedia('success');
        };
      })(this);
      return image.src = this.url;
    };

    RMedia.prototype.loadMedia = function(imageLoadResult) {
      if (imageLoadResult === 'success') {
        console.log('is image: ' + this.url + ', ' + this.pk);
        this.contentJ = $('<img class="content image" src="' + this.url + '" alt="' + this.url + '"">');
        this.contentJ.mousedown(function(event) {
          return event.preventDefault();
        });
        this.isImage = true;
      } else {
        console.log('is not image: ' + this.url + ', ' + this.pk);
        this.contentJ = $('<div class="content oembedall-container"></div>');
        this.contentJ.oembed(this.url, {
          includeHandle: false,
          embedMethod: 'fill',
          maxWidth: this.divJ.width(),
          maxHeight: this.divJ.height(),
          afterEmbed: this.afterEmbed
        });
      }
      this.contentJ.insertBefore(this.maskJ);
      return this.setCss();
    };

    RMedia.prototype.urlChanged = function(url, updateDiv) {
      if (updateDiv == null) {
        updateDiv = false;
      }
      console.log('urlChanged, updateDiv: ' + updateDiv + ', ' + this.pk);
      this.url = url;
      if (this.contentJ != null) {
        this.contentJ.remove();
        $("#jqoembeddata").remove();
      }
      this.checkIsImage();
      if (updateDiv) {
        if ((g.me != null) && datFolder.name !== 'General') {
          g.chatSocket.emit("parameter change", g.me, item.pk, name, value);
        }
        return this.update();
      }
    };

    RMedia.prototype.afterEmbed = function() {
      var height, width, _ref;
      width = this.divJ.width();
      height = this.divJ.height();
      return (_ref = this.contentJ) != null ? _ref.find("iframe").attr("width", width).attr("height", height) : void 0;
    };

    RMedia.prototype.getData = function() {
      var data;
      data = jQuery.extend({}, this.data);
      delete data.url;
      return data;
    };

    return RMedia;

  })(RDiv);

  this.RMedia = RMedia;

}).call(this);

//# sourceMappingURL=div.map
