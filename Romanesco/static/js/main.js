// Generated by CoffeeScript 1.7.1

/*
 * Romanesco documentation #

Romanesco is an experiment about freedom, creativity and collaboration.

tododoc
tododoc: define RItems

The source code is divided in files:
 - [main.coffee](http://main.html) which is where the initialization
 - [path.coffee](http://path.html)
 - etc

Notations:
 - override means that the method extends functionnalities of the inherited method (super is called at some point)
 - redefine means that it totally replace the method (super is never called)
 */

(function() {
  var init, initPosition, initTools;

  initTools = function() {
    var defaultFavoriteTools, error, initToolTypeahead, pathClass, sortStart, sortStop, _i, _len;
    g.toolsJ = $(".tool-list");
    g.favoriteToolsJ = $("#FavoriteTools .tool-list");
    g.allToolsContainerJ = $("#AllTools");
    g.allToolsJ = g.allToolsContainerJ.find(".all-tool-list");
    g.favoriteTools = [];
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      try {
        g.favoriteTools = JSON.parse(localStorage.favorites);
      } catch (_error) {
        error = _error;
        console.log(error);
      }
    }
    defaultFavoriteTools = [PrecisePath, ThicknessPath, Meander, GeometricLines, RectangleShape, EllipseShape, StarShape, SpiralShape];
    while (g.favoriteTools.length < 8) {
      g.pushIfAbsent(g.favoriteTools, defaultFavoriteTools.pop().rname);
    }
    g.tools = new Object();
    new MoveTool();
    new CarTool();
    new SelectTool();
    new CodeTool();
    new LockTool(RLock);
    new TextTool(RText);
    new MediaTool(RMedia);
    new ScreenshotTool();
    for (_i = 0, _len = pathClasses.length; _i < _len; _i++) {
      pathClass = pathClasses[_i];
      new PathTool(pathClass);
    }
    initToolTypeahead = function() {
      var promise, tool, toolValues, _j, _len1, _ref;
      toolValues = [];
      _ref = g.allToolsJ.children();
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        tool = _ref[_j];
        toolValues.push({
          value: $(tool).attr("data-type")
        });
      }
      g.typeaheadToolEngine = new Bloodhound({
        name: 'Tools',
        local: toolValues,
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace
      });
      promise = g.typeaheadToolEngine.initialize();
      g.searchToolInputJ = g.allToolsContainerJ.find("input.search-tool");
      g.searchToolInputJ.keyup(function(event) {
        var query;
        query = g.searchToolInputJ.val();
        if (query === "") {
          g.allToolsJ.children().show();
          return;
        }
        g.allToolsJ.children().hide();
        g.typeaheadToolEngine.get(query, function(suggestions) {
          var suggestion, _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = suggestions.length; _k < _len2; _k++) {
            suggestion = suggestions[_k];
            console.log(suggestion);
            _results.push(g.allToolsJ.children("[data-type='" + suggestion.value + "']").show());
          }
          return _results;
        });
      });
    };
    Dajaxice.draw.getTools(function(result) {
      var script, scripts, _j, _len1;
      scripts = JSON.parse(result.tools);
      for (_j = 0, _len1 = scripts.length; _j < _len1; _j++) {
        script = scripts[_j];
        g.runScript(script);
      }
      initToolTypeahead();
    });
    sortStart = function(event, ui) {
      $("#sortable1, #sortable2").addClass("drag-over");
    };
    sortStop = function(event, ui) {
      var li, names, tool, toolValues, _j, _k, _len1, _len2, _ref, _ref1;
      $("#sortable1, #sortable2").removeClass("drag-over");
      if (typeof localStorage === "undefined" || localStorage === null) {
        return;
      }
      names = [];
      _ref = g.favoriteToolsJ.children();
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        li = _ref[_j];
        names.push($(li).attr("data-type"));
      }
      localStorage.favorites = JSON.stringify(names);
      toolValues = [];
      _ref1 = g.allToolsJ.children();
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        tool = _ref1[_k];
        toolValues.push({
          value: $(tool).attr("data-type")
        });
      }
      g.typeaheadToolEngine.clear();
      g.typeaheadToolEngine.add(toolValues);
    };
    $("#sortable1, #sortable2").sortable({
      connectWith: ".connectedSortable",
      appendTo: g.sidebarJ,
      helper: "clone",
      start: sortStart,
      stop: sortStop
    }).disableSelection();
    g.tools['Move'].select();
  };

  initPosition = function() {
    var box, boxRectangle, boxString, br, controller, folder, folderName, loadEntireArea, planet, pos, site, siteString, tl, _i, _len, _ref, _ref1;
    boxString = g.canvasJ.attr("data-box");
    if (!boxString || boxString.length === 0) {
      window.onhashchange();
      return;
    }
    box = JSON.parse(boxString);
    planet = new Point(box.planetX, box.planetY);
    tl = posOnPlanetToProject(box.box.coordinates[0][0], planet);
    br = posOnPlanetToProject(box.box.coordinates[0][2], planet);
    boxRectangle = new Rectangle(tl, br);
    pos = boxRectangle.center;
    g.RMoveTo(pos);
    loadEntireArea = g.canvasJ.attr("data-load-entire-area");
    if (loadEntireArea) {
      g.entireArea = boxRectangle;
      g.quick_load(boxRectangle);
    }
    siteString = g.canvasJ.attr("data-site");
    site = JSON.parse(siteString);
    if (site.restrictedArea) {
      g.restrictedArea = boxRectangle;
    }
    g.tools['Select'].select();
    if (site.disableToolbar) {
      g.sidebarJ.hide();
    } else {
      g.sidebarJ.find("div.panel.panel-default:not(:last)").hide();
      _ref = g.gui.__folders;
      for (folderName in _ref) {
        folder = _ref[folderName];
        _ref1 = folder.__controllers;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          controller = _ref1[_i];
          if (controller.name !== 'Zoom') {
            folder.remove(controller);
            folder.__controllers.remove(controller);
          }
        }
        if (folder.__controllers.length === 0) {
          g.gui.removeFolder(folderName);
        }
      }
      g.sidebarHandleJ.click();
    }
  };

  paper.install(window);

  init = function() {
    var activeLayer;
    g.romanescoURL = 'http://localhost:8000/';
    g.windowJ = $(window);
    g.stageJ = $("#stage");
    g.sidebarJ = $("#sidebar");
    g.canvasJ = g.stageJ.find("#canvas");
    g.canvas = g.canvasJ[0];
    g.context = g.canvas.getContext('2d');
    g.templatesJ = $("#templates");
    g.me = null;
    g.selectedDivs = [];
    g.selectionGroup = null;
    g.polygonMode = false;
    g.selectionBlue = '#2fa1d6';
    g.updateTimeout = {};
    g.restrictedArea = null;
    g.OSName = "Unknown OS";
    g.currentPaths = {};
    g.loadingBarTimeout = null;
    g.entireArea = null;
    g.entireAreas = [];
    g.loadedAreas = [];
    g.paths = new Object();
    g.items = new Object();
    g.locks = [];
    g.divs = [];
    g.sortedPaths = [];
    g.animatedItems = [];
    g.cars = {};
    g.fastMode = false;
    g.fastModeOn = false;
    g.alerts = null;
    g.scale = 1000.0;
    g.previousPoint = null;
    g.draggingEditor = false;
    g.rasters = {};
    g.areasToUpdate = {};
    Dajaxice.setup({
      'default_exception_callback': function(error) {
        console.log('Dajaxice error!');
        romanesco_alert("Connection error", "error");
      }
    });
    if (navigator.appVersion.indexOf("Win") !== -1) {
      g.OSName = "Windows";
    }
    if (navigator.appVersion.indexOf("Mac") !== -1) {
      g.OSName = "MacOS";
    }
    if (navigator.appVersion.indexOf("X11") !== -1) {
      g.OSName = "UNIX";
    }
    if (navigator.appVersion.indexOf("Linux") !== -1) {
      g.OSName = "Linux";
    }
    paper.setup(canvas);
    activeLayer = project.activeLayer;
    g.debugLayer = new Layer();
    g.carLayer = new Layer();
    activeLayer.activate();
    paper.settings.hitTolerance = 5;
    g.grid = new Group();
    g.grid.name = 'grid group';
    view.zoom = 0.01;
    Point.prototype.toJSON = function() {
      return {
        x: this.x,
        y: this.y
      };
    };
    Point.prototype.exportJSON = function() {
      return JSON.stringify(this.toJSON());
    };
    Rectangle.prototype.toJSON = function() {
      return {
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height
      };
    };
    Rectangle.prototype.exportJSON = function() {
      return JSON.stringify(this.toJSON());
    };
    g.tool = new Tool();
    g.defaultColors = ['#d7dddb', '#4f8a83', '#e76278', '#fac699', '#712164'];
    g.alertsContainer = $("#Romanesco_alerts");
    g.alerts = [];
    g.currentAlert = -1;
    g.alertTimeOut = -1;
    g.alertsContainer.find(".btn-up").click(function() {
      return showAlert(g.currentAlert - 1);
    });
    g.alertsContainer.find(".btn-down").click(function() {
      return showAlert(g.currentAlert + 1);
    });
    g.sidebarHandleJ = g.sidebarJ.find(".sidebar-handle");
    g.sidebarHandleJ.click(function() {
      g.toggleSidebar();
    });
    $(".mCustomScrollbar.sidebar-scrollbar").mCustomScrollbar({
      keyboard: false
    });
    g.sound = new RSound(['/static/sounds/viper.ogg']);
    $.ajax({
      url: g.romanescoURL + "static/coffee/path.coffee"
    }).done(function(data) {
      var classMap, expression, expressions, lines, pathClass, _i, _j, _len, _len1, _ref, _ref1;
      lines = data.split(/\n/);
      expressions = CoffeeScript.nodes(data).expressions;
      classMap = {};
      _ref = g.pathClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pathClass = _ref[_i];
        classMap[pathClass.name] = pathClass;
      }
      for (_j = 0, _len1 = expressions.length; _j < _len1; _j++) {
        expression = expressions[_j];
        if ((_ref1 = classMap[expression.variable.base.value]) != null) {
          _ref1.source = lines.slice(expression.locationData.first_line, +expression.locationData.last_line + 1 || 9e9).join("\n");
        }
      }
    });
    initParameters();
    initCodeEditor();
    initTools();
    initSocket();
    initPosition();
    updateGrid();
    animate();
  };

  $(document).ready(function() {
    init();
    g.canvasJ.mousedown(g.mousedown);
    g.stageJ.mousedown(g.mousedown);
    $(window).mousemove(g.mousemove);
    $(window).mouseup(g.mouseup);
    g.stageJ.mousewheel(function(event) {
      g.RMoveBy(new Point(-event.deltaX, event.deltaY));
    });
    canvasJ.dblclick(function(event) {
      var _base;
      return typeof (_base = g.selectedTool).doubleClick === "function" ? _base.doubleClick(event) : void 0;
    });
    canvasJ.keydown(function(event) {
      if (event.key === 46) {
        return event.preventDefault();
      }
    });
    tool.onMouseDown = function(event) {
      $(document.activeElement).blur();
      return g.selectedTool.begin(event);
    };
    tool.onMouseDrag = function(event) {
      event = g.snap(event);
      return g.selectedTool.update(event);
    };
    tool.onMouseUp = function(event) {
      event = g.snap(event);
      return g.selectedTool.end(event);
    };
    tool.onKeyDown = function(event) {
      var selectedDiv, _i, _len, _ref;
      _ref = g.selectedDivs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selectedDiv = _ref[_i];
        if (selectedDiv.constructor.name === 'RText') {
          return;
        }
      }
      if (event.key === 'delete') {
        event.preventDefault();
      }
      if (event.key === 'space' && g.selectedTool.name !== 'Move') {
        return g.tools['Move'].select();
      }
    };
    tool.onKeyUp = function(event) {
      var delta, item, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if ($(document.activeElement).parents(".sidebar").length || $(document.activeElement).is("textarea")) {
        return;
      }
      if ((_ref = event.key) === 'left' || _ref === 'right' || _ref === 'up' || _ref === 'down') {
        delta = event.modifiers.shift ? 50 : event.modifiers.option ? 5 : 1;
      }
      switch (event.key) {
        case 'right':
          _ref1 = g.selectedItems();
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            item.moveBy(new Point(delta, 0), true);
          }
          break;
        case 'left':
          _ref2 = g.selectedItems();
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            item = _ref2[_j];
            item.moveBy(new Point(-delta, 0), true);
          }
          break;
        case 'up':
          _ref3 = g.selectedItems();
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            item = _ref3[_k];
            item.moveBy(new Point(0, -delta), true);
          }
          break;
        case 'down':
          _ref4 = g.selectedItems();
          for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
            item = _ref4[_l];
            item.moveBy(new Point(0, delta), true);
          }
          break;
        case 'enter':
        case 'escape':
          if (typeof (_base = g.selectedTool).finishPath === "function") {
            _base.finishPath();
          }
          break;
        case 'space':
          if ((_ref5 = g.previousTool) != null) {
            _ref5.select();
          }
          break;
        case 'v':
          g.tools['Select'].select();
          break;
        case 'delete':
        case 'backspace':
          _ref6 = g.selectedItems();
          for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {
            item = _ref6[_m];
            item["delete"]();
          }
      }
      return event.preventDefault();
    };
    view.onFrame = function(event) {
      var car, direction, item, username, _base, _i, _len, _ref, _ref1;
      if (typeof (_base = g.selectedTool).onFrame === "function") {
        _base.onFrame(event);
      }
      _ref = g.animatedItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.onFrame(event);
      }
      _ref1 = g.cars;
      for (username in _ref1) {
        car = _ref1[username];
        direction = new Point(1, 0);
        direction.angle = car.rotation - 90;
        car.position = car.position.add(direction.multiply(car.speed));
        if (Date.now() - car.rLastUpdate > 1000) {
          g.cars[username].remove();
          delete g.cars[username];
        }
      }
    };
    g.windowJ.resize(function(event) {
      updateGrid();
      $(".mCustomScrollbar").mCustomScrollbar("update");
      return view.draw();
    });
  });

  this.mousedown = function(event) {
    var _base;
    switch (event.which) {
      case 2:
        g.tools['Move'].select();
        break;
      case 3:
        if (typeof (_base = g.selectedTool).finishPath === "function") {
          _base.finishPath();
        }
    }
    if (g.selectedTool.name === 'Move') {
      g.selectedTool.beginNative(event);
      return;
    }
    if (event.target.nodeName === "CANVAS") {
      return false;
    }
    g.previousPoint = new Point(event.pageX, event.pageY);
  };

  this.mousemove = function(event) {
    var item, _i, _len, _ref;
    if (g.selectedTool.name === 'Move') {
      g.selectedTool.updateNative(event);
    }
    if (g.previousPoint != null) {
      event.delta = new Point(event.pageX - g.previousPoint.x, event.pageY - g.previousPoint.y);
      g.previousPoint = new Point(event.pageX, event.pageY);
      _ref = g.selectedItems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (typeof item.selectUpdate === "function") {
          item.selectUpdate(event);
        }
      }
    }
    if (g.draggingEditor) {
      g.editorJ.css({
        right: g.windowJ.width() - event.pageX
      });
    }
  };

  this.mouseup = function(event) {
    var item, _i, _len, _ref, _ref1;
    if (g.selectedTool.name === 'Move') {
      g.selectedTool.endNative(event);
    }
    if (event.which === 2) {
      if ((_ref = g.previousTool) != null) {
        _ref.select();
      }
    }
    g.mousemove(event);
    if (g.previousPoint != null) {
      event.delta = new Point(event.pageX - g.previousPoint.x, event.pageY - g.previousPoint.y);
      g.previousPoint = null;
      _ref1 = g.selectedItems();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (typeof item.selectEnd === "function") {
          item.selectEnd(event);
        }
      }
    }
    g.draggingEditor = false;
  };

}).call(this);

//# sourceMappingURL=main.map
