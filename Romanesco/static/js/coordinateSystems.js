// Generated by CoffeeScript 1.7.1
(function() {
  this.g = this;

  this.projectToPlanet = function(point) {
    var planet, x, y;
    planet = {};
    x = point.x / g.scale;
    planet.x = Math.floor((x + 180) / 360);
    y = point.y / g.scale;
    planet.y = Math.floor((y + 90) / 180);
    return planet;
  };

  this.projectToPosOnPlanet = function(point, planet) {
    var pos;
    if (planet == null) {
      planet = this.projectToPlanet(point);
    }
    pos = {};
    pos.x = point.x / g.scale - 360 * planet.x;
    pos.y = point.y / g.scale - 180 * planet.y;
    return pos;
  };

  this.projectToPlanetJson = function(point) {
    var planet, pos;
    planet = projectToPlanet(point);
    pos = projectToPosOnPlanet(point, planet);
    return {
      pos: pos,
      planet: planet
    };
  };

  this.posOnPlanetToProject = function(point, planet) {
    var x, y;
    if ((point.x == null) && (point.y == null)) {
      point = arrayToPoint(point);
    }
    x = planet.x * 360 + point.x;
    y = planet.y * 180 + point.y;
    x *= g.scale;
    y *= g.scale;
    return new Point(x, y);
  };

  this.arrayToPoint = function(array) {
    return new Point(array);
  };

  this.pointToArray = function(point) {
    return [point.x, point.y];
  };

  this.pointToObj = function(point) {
    return {
      x: point.x,
      y: point.y
    };
  };

  this.getChatRoom = function() {
    return 'x: ' + Math.round(view.center.x / g.scale) + ', y: ' + Math.round(view.center.y / g.scale);
  };

  this.getTopLeftCorner = function() {
    return view.viewToProject(new Point(0, 0));
  };

  this.midPoint = function(p1, p2) {
    return new Point((p1.x + p2.x) * 0.5, (p1.y + p2.y) * 0.5);
  };

  this.viewToProjectRectangle = function(rectangle) {
    return new Rectangle(view.viewToProject(rectangle.topLeft), view.viewToProject(rectangle.bottomRight));
  };

  this.projectToViewRectangle = function(rectangle) {
    return new Rectangle(view.projectToView(rectangle.topLeft), view.projectToView(rectangle.bottomRight));
  };

  this.getLimit = function() {
    var planet;
    planet = projectToPlanet(getTopLeftCorner());
    return posOnPlanetToProject(new Point(-180, -90), new Point(planet.x + 1, planet.y + 1));
  };

  this.boxFromRectangle = function(rectangle) {
    var brOnPlanet, planet, points, tlOnPlanet;
    planet = pointToObj(projectToPlanet(rectangle.topLeft));
    tlOnPlanet = projectToPosOnPlanet(rectangle.topLeft, planet);
    brOnPlanet = projectToPosOnPlanet(rectangle.bottomRight, planet);
    points = [];
    points.push(pointToArray(tlOnPlanet));
    points.push(pointToArray(projectToPosOnPlanet(rectangle.topRight, planet)));
    points.push(pointToArray(brOnPlanet));
    points.push(pointToArray(projectToPosOnPlanet(rectangle.bottomLeft, planet)));
    points.push(pointToArray(tlOnPlanet));
    return {
      points: points,
      planet: pointToObj(planet),
      tl: tlOnPlanet,
      br: brOnPlanet
    };
  };

}).call(this);

//# sourceMappingURL=coordinateSystems.map
