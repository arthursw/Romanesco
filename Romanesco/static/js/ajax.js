// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  this.areaIsLoaded = function(pos, planet) {
    var area, _i, _len, _ref;
    _ref = g.loadedAreas;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      area = _ref[_i];
      if (area.planet.x === planet.x && area.planet.y === planet.y) {
        if (area.pos.x === pos.x && area.pos.y === pos.y) {
          return true;
        }
      }
    }
    return false;
  };

  this.load = function(area) {
    var areaRectangle, areasToLoad, b, bounds, debug, halfSize, i, item, itemsDates, itemsOutsideLimit, j, l, limit, pk, planet, pos, r, rectangle, removeRectangle, scale, showLoadingBar, t, unloadDist, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
    if (area == null) {
      area = null;
    }
    if (!g.rasterizerMode && (g.previousLoadPosition != null) && g.previousLoadPosition.subtract(view.center).length < 50) {
      return false;
    }
    console.log("load");
    if (area != null) {
      console.log(area.toString());
    }
    debug = false;
    scale = g.scale;
    g.previousLoadPosition = view.center;
    if (area == null) {
      if (view.bounds.width <= window.innerWidth && view.bounds.height <= window.innerHeight) {
        bounds = view.bounds;
      } else {
        halfSize = new Point(window.innerWidth * 0.5, window.innerHeight * 0.5);
        bounds = new Rectangle(view.center.subtract(halfSize), view.center.add(halfSize));
      }
    } else {
      bounds = area;
    }
    if (debug) {
      if ((_ref = g.unloadRectangle) != null) {
        _ref.remove();
      }
      if ((_ref1 = g.viewRectangle) != null) {
        _ref1.remove();
      }
      if ((_ref2 = g.limitRectangle) != null) {
        _ref2.remove();
      }
    }
    unloadDist = Math.round(scale / view.zoom);
    if (!g.entireArea) {
      limit = bounds.expand(unloadDist);
    } else {
      limit = g.entireArea;
    }
    itemsOutsideLimit = [];
    _ref3 = g.items;
    for (pk in _ref3) {
      if (!__hasProp.call(_ref3, pk)) continue;
      item = _ref3[pk];
      if (!item.getBounds().intersects(limit)) {
        itemsOutsideLimit.push(item);
      }
    }
    if (debug) {
      g.unloadRectangle = new Path.Rectangle(limit);
      g.unloadRectangle.name = 'debug load unload rectangle';
      g.unloadRectangle.strokeWidth = 1;
      g.unloadRectangle.strokeColor = 'red';
      g.unloadRectangle.dashArray = [10, 4];
      g.debugLayer.addChild(g.unloadRectangle);
    }
    if (debug) {
      removeRectangle = function(rectangle) {
        var removeRect;
        removeRect = function() {
          return rectangle.remove();
        };
        setTimeout(removeRect, 1500);
      };
    }
    g.rasterizer.unload(limit);
    i = g.loadedAreas.length;
    while (i--) {
      area = g.loadedAreas[i];
      pos = posOnPlanetToProject(area.pos, area.planet);
      rectangle = new Rectangle(pos.x, pos.y, scale, scale);
      if (!rectangle.intersects(limit)) {
        if (debug) {
          area.rectangle.strokeColor = 'red';
          removeRectangle(area.rectangle);
        }
        g.loadedAreas.splice(i, 1);
        j = itemsOutsideLimit.length;
        while (j--) {
          item = itemsOutsideLimit[j];
          if (item.getBounds().intersects(rectangle)) {
            item.remove();
            itemsOutsideLimit.splice(j, 1);
          }
        }
      }
    }
    itemsOutsideLimit = null;
    t = g.roundToLowerMultiple(bounds.top, scale);
    l = g.roundToLowerMultiple(bounds.left, scale);
    b = g.roundToLowerMultiple(bounds.bottom, scale);
    r = g.roundToLowerMultiple(bounds.right, scale);
    if (debug) {
      g.viewRectangle = new Path.Rectangle(bounds);
      g.viewRectangle.name = 'debug load view rectangle';
      g.viewRectangle.strokeWidth = 1;
      g.viewRectangle.strokeColor = 'blue';
      g.debugLayer.addChild(g.viewRectangle);
      g.limitRectangle = new Path.Rectangle(new Point(l, t), new Point(r, b));
      g.limitRectangle.name = 'debug load limit rectangle';
      g.limitRectangle.strokeWidth = 2;
      g.limitRectangle.strokeColor = 'blue';
      g.limitRectangle.dashArray = [10, 4];
      g.debugLayer.addChild(g.limitRectangle);
    }
    areasToLoad = [];
    for (x = _i = l; scale > 0 ? _i <= r : _i >= r; x = _i += scale) {
      for (y = _j = t; scale > 0 ? _j <= b : _j >= b; y = _j += scale) {
        planet = projectToPlanet(new Point(x, y));
        pos = projectToPosOnPlanet(new Point(x, y));
        if (g.rasterizerMode || !areaIsLoaded(pos, planet)) {
          if (debug) {
            areaRectangle = new Path.Rectangle(x, y, scale, scale);
            areaRectangle.name = 'debug load area rectangle';
            areaRectangle.strokeWidth = 1;
            areaRectangle.strokeColor = 'green';
            g.debugLayer.addChild(areaRectangle);
          }
          area = {
            pos: pos,
            planet: planet
          };
          areasToLoad.push(area);
          if (debug) {
            area.rectangle = areaRectangle;
          }
          if (!g.rasterizerMode || !areaIsLoaded(pos, planet)) {
            g.loadedAreas.push(area);
          }
        }
      }
    }
    if (!g.rasterizerMode && areasToLoad.length <= 0) {
      return false;
    }
    if (g.loadingBarTimeout == null) {
      showLoadingBar = function() {
        $("#loadingBar").show();
      };
      g.loadingBarTimeout = setTimeout(showLoadingBar, 0);
    }
    rectangle = {
      left: l,
      top: t,
      right: r,
      bottom: b
    };
    console.log('request loading');
    console.log(rectangle);
    if (!g.rasterizerMode) {
      Dajaxice.draw.load(loadCallback, {
        rectangle: rectangle,
        areasToLoad: areasToLoad,
        zoom: 1.0 / view.zoom
      });
    } else {
      itemsDates = g.createItemsDates(bounds);
      Dajaxice.draw.loadRasterizer(loadCallback, {
        areasToLoad: areasToLoad,
        itemsDates: itemsDates
      });
    }
    return true;
  };

  this.loadCallback = function(results) {
    var box, data, date, dispatchLoadFinished, div, i, item, itemsToLoad, lock, path, planet, point, points, rdiv, rpath, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    console.log("load callback");
    dispatchLoadFinished = function() {
      var commandEvent;
      console.log("dispatch command executed");
      commandEvent = document.createEvent('Event');
      commandEvent.initEvent('command executed', true, true);
      document.dispatchEvent(commandEvent);
    };
    checkError(results);
    if (results.hasOwnProperty('message') && results.message === 'no_paths') {
      dispatchLoadFinished();
      return;
    }
    if ((g.me == null) && (results.user != null)) {
      g.me = results.user;
      if ((g.chatJ != null) && g.chatJ.find("#chatUserNameInput").length === 0) {
        g.startChatting(g.me);
      }
    }
    if (results.rasters != null) {
      g.rasterizer.load(results.rasters, results.zoom);
    }
    itemsToLoad = [];
    _ref = results.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      item = JSON.parse(i);
      if ((_ref1 = g.items[item._id.$oid]) != null) {
        _ref1.remove();
      }
      if (item.rType === 'Box') {
        box = item;
        if (box.box.coordinates[0].length < 5) {
          console.log("Error: box has less than 5 points");
        }
        data = (box.data != null) && box.data.length > 0 ? JSON.parse(box.data) : null;
        date = box.date.$date;
        lock = null;
        switch (box.object_type) {
          case 'link':
            lock = new RLink(g.rectangleFromBox(box), data, box._id.$oid, box.owner, date);
            break;
          case 'lock':
            lock = new RLock(g.rectangleFromBox(box), data, box._id.$oid, box.owner, date);
            break;
          case 'website':
            lock = new RWebsite(g.rectangleFromBox(box), data, box._id.$oid, box.owner, date);
            break;
          case 'video-game':
            lock = new RVideoGame(g.rectangleFromBox(box), data, box._id.$oid, box.owner, date);
        }
        lock.lastUpdateDate = box.lastUpdate.$date;
      } else {
        itemsToLoad.push(item);
      }
    }
    for (_j = 0, _len1 = itemsToLoad.length; _j < _len1; _j++) {
      item = itemsToLoad[_j];
      switch (item.rType) {
        case 'Div':
          div = item;
          if (div.box.coordinates[0].length < 5) {
            console.log("Error: box has less than 5 points");
          }
          data = (div.data != null) && div.data.length > 0 ? JSON.parse(div.data) : null;
          date = div.date.$date;
          switch (div.object_type) {
            case 'text':
              rdiv = new RText(g.rectangleFromBox(div), data, div._id.$oid, date, div.lock != null ? g.items[div.lock] : null);
              break;
            case 'media':
              rdiv = new RMedia(g.rectangleFromBox(div), data, div._id.$oid, date, div.lock != null ? g.items[div.lock] : null);
          }
          rdiv.lastUpdateDate = div.lastUpdate.$date;
          break;
        case 'Path':
          path = item;
          planet = new Point(path.planetX, path.planetY);
          date = path.date.$date;
          if ((path.data != null) && path.data.length > 0) {
            data = JSON.parse(path.data);
            data.planet = planet;
          }
          points = [];
          _ref2 = path.points.coordinates;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            point = _ref2[_k];
            points.push(posOnPlanetToProject(point, planet));
          }
          rpath = null;
          if (g.tools[path.object_type] != null) {
            rpath = new g.tools[path.object_type].RPath(date, data, path._id.$oid, points, path.lock != null ? g.items[path.lock] : null);
            rpath.lastUpdateDate = path.lastUpdate.$date;
            if (rpath.constructor.name === "Checkpoint") {
              console.log(rpath);
            }
          } else {
            console.log("Unknown path type: " + path.object_type);
          }
          break;
        default:
          continue;
      }
    }
    RDiv.updateZIndex(g.sortedDivs);
    if (!g.rasterizerMode) {
      clearTimeout(g.loadingBarTimeout);
      g.loadingBarTimeout = null;
      $("#loadingBar").hide();
      dispatchLoadFinished();
    }
    if (typeof window.saveOnServer === "function") {
      g.rasterizeAndSaveOnServer();
    }
  };

}).call(this);

//# sourceMappingURL=ajax.map
