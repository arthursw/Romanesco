// Generated by CoffeeScript 1.7.1
(function() {
  var RModal;

  RModal = (function() {
    function RModal() {}

    RModal.extractors = [];

    RModal.modalJ = $('#customModal');

    RModal.modalBodyJ = RModal.modalJ.find('.modal-body');

    RModal.modalJ.on('shown.bs.modal', function(event) {
      return RModal.modalJ.find('input.form-control:visible:first').focus();
    });

    RModal.modalJ.find('.btn-primary').click(function(event) {
      return RModal.modalSubmit();
    });

    RModal.initialize = function(title, submitCallback) {
      this.submitCallback = submitCallback;
      this.modalBodyJ.empty();
      this.extractors = {};
      this.modalJ.find("h4.modal-title").html(title);
    };

    RModal.addTextInput = function(name, placeholder, type, className, label, submitShortcut, id) {
      var args, divJ, extractor, inputID, inputJ, labelJ;
      if (placeholder == null) {
        placeholder = null;
      }
      if (type == null) {
        type = null;
      }
      if (className == null) {
        className = null;
      }
      if (label == null) {
        label = null;
      }
      if (submitShortcut == null) {
        submitShortcut = false;
      }
      if (id == null) {
        id = null;
      }
      submitShortcut = submitShortcut ? 'submit-shortcut' : '';
      inputJ = $("<input type='" + type + "' class='" + className + " form-control " + submitShortcut + "' placeholder='" + placeholder + "'>");
      args = inputJ;
      extractor = function(data, inputJ, name) {
        data[name] = inputJ.val();
      };
      if (label) {
        inputID = 'modal-' + name + '-' + Math.random().toString();
        inputJ.attr('id', inputID);
        divJ = $("<div id='" + id + "' class='form-group " + className + "-group'></div>");
        labelJ = $("<label for='" + inputID + "'>" + label + "</label>");
        divJ.append(labelJ);
        divJ.append(inputJ);
        inputJ = divJ;
      }
      this.addCustomContent(name, inputJ, extractor, args);
      return inputJ;
    };

    RModal.addCheckbox = function(name, label, helpMessage) {
      var checkboxJ, divJ, extractor, helpMessageJ;
      if (helpMessage == null) {
        helpMessage = null;
      }
      divJ = $("<div>");
      checkboxJ = $("<label><input type='checkbox' form-control>" + label + "</label>");
      divJ.append(checkboxJ);
      if (helpMessage) {
        helpMessageJ = $("<p class='help-block'>" + helpMessage + "</p>");
        divJ.append(helpMessageJ);
      }
      extractor = function(data, checkboxJ, name) {
        data[name] = checkboxJ.is(':checked');
      };
      this.addCustomContent(name, divJ, extractor, checkboxJ);
      return divJ;
    };

    RModal.addRadioGroup = function(name, radioButtons) {
      var checked, divJ, extractor, inputJ, labelJ, radioButton, radioJ, submitShortcut, _i, _len;
      divJ = $("<div>");
      for (_i = 0, _len = radioButtons.length; _i < _len; _i++) {
        radioButton = radioButtons[_i];
        radioJ = $("<div class='radio'>");
        labelJ = $("<label>");
        checked = radioButton.checked ? 'checked' : '';
        submitShortcut = radioButton.submitShortcut ? 'class="submit-shortcut"' : '';
        inputJ = $("<input type='radio' name='" + name + "' value='" + radioButton.value + "' " + checked + " " + submitShortcut + ">");
        labelJ.append(inputJ);
        labelJ.append(radioButton.label);
        radioJ.append(labelJ);
        divJ.append(radioJ);
      }
      extractor = function(data, divJ, name) {
        data[name] = divJ.find("input[type=radio][name=" + name + "]:checked")[0].value;
      };
      this.addCustomContent(name, divJ, extractor);
      return divJ;
    };

    RModal.addCustomContent = function(name, div, extractor, args) {
      if (args == null) {
        args = null;
      }
      if (args == null) {
        args = div;
      }
      div.attr('id', 'modal-' + name);
      this.modalBodyJ.append(div);
      this.extractors[name] = {
        extractor: extractor,
        args: args,
        div: div
      };
    };

    RModal.show = function() {
      this.modalJ.find('.submit-shortcut').keypress((function(_this) {
        return function(event) {
          if (event.which === 13) {
            event.preventDefault();
            _this.modalSubmit();
          }
        };
      })(this));
      this.modalJ.modal('show');
    };

    RModal.modalSubmit = function() {
      var data, extractor, name, _ref;
      data = {};
      _ref = this.extractors;
      for (name in _ref) {
        extractor = _ref[name];
        extractor.extractor(data, extractor.args, name);
      }
      this.submitCallback(data);
      this.modalBodyJ.empty();
      this.extractors = {};
      this.modalJ.modal('hide');
    };

    return RModal;

  })();

  this.RModal = RModal;

}).call(this);

//# sourceMappingURL=modal.map
